{"version":3,"sources":["webpack:///./src/app/components/insurance-type/insurance-type-form/insurance-type-form.component.html","webpack:///./src/app/components/insurance-type/insurance-type-form/insurance-type-form.component.scss","webpack:///./src/app/components/insurance-type/insurance-type-form/insurance-type-form.component.ts","webpack:///./src/app/components/insurance-type/insurance-type-list/insurance-type-list.component.html","webpack:///./src/app/components/insurance-type/insurance-type-list/insurance-type-list.component.scss","webpack:///./src/app/components/insurance-type/insurance-type-list/insurance-type-list.component.ts","webpack:///./src/app/components/insurance-type/insurance-type-routing.module.ts","webpack:///./src/app/components/insurance-type/insurance-type.component.html","webpack:///./src/app/components/insurance-type/insurance-type.component.scss","webpack:///./src/app/components/insurance-type/insurance-type.component.ts"],"names":[],"mappings":"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","file":"components-insurance-type-insurance-type-routing-module.js","sourcesContent":["module.exports = \"<section class=\\\"container-fluid section\\\">\\n  <div class=\\\"col-12 grey lighten-4\\\">\\n    <header class=\\\"header row\\\">\\n      <div class=\\\"col-12\\\">\\n        <app-title [title]=title></app-title>\\n      </div>\\n    </header>\\n\\n    <div class=\\\"col-12\\\">\\n      <form [formGroup]=\\\"insuranceTypeForm\\\" (ngSubmit)=\\\"onSubmit()\\\" >\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"inputInsuranceTypeName\\\" class=\\\"col-sm-2 col-form-label\\\">Name</label>\\n          <div>\\n            <div class=\\\"md-form mt-0\\\">\\n              <input type=\\\"text\\\" class=\\\"form-control capitalize\\\" id=\\\"inputInsuranceTypeName\\\" formControlName=\\\"name\\\">\\n              <!-- <p style=\\\"color:red\\\" *ngIf=\\\"insuranceTypeForm.controls.name.touched && insuranceTypeForm.controls.name.errors.required\\\">Required</p> -->\\n              <app-control-messages [control]=\\\"insuranceTypeForm.controls.name\\\"></app-control-messages>\\n            </div>\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"text-right\\\">\\n            <!--  [disabled]=\\\"insuranceTypeForm.invalid\\\"-->\\n            <button type=\\\"submit\\\" class=\\\"btn btn-primary btn-custom btn-md\\\" >\\n              <i class=\\\"fa fa-save\\\"></i>\\n            </button>\\n            <app-simple-modal [module]=\\\"module\\\" [mode]=\\\"mode\\\" [name]=\\\"insuranceTypeForm.controls.name.value\\\" (isDelete)=\\\"deleteInsuranceType($event)\\\"></app-simple-modal>\\n\\n          </div>\\n        </div>\\n      </form>\\n    </div>\\n  </div>\\n</section>\\n\"","module.exports = \"\"","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router,ActivatedRoute } from '@angular/router';\n\nimport { InsuranceType } from 'app/data-model';\nimport { InsuranceTypeService } from 'app/services/insurance-type/insurance-type.service';\n\n@Component({\n  selector: 'app-insuranceType-form',\n  templateUrl: './insurance-type-form.component.html',\n  styleUrls: ['./insurance-type-form.component.scss']\n})\nexport class InsuranceTypeFormComponent implements OnInit {\n  title : string = \"Create Insurance Type\";\n  module :string=\"insurance type\";\n  mode :string=\"discard\";\n  message:string=\"\";\n  insuranceTypeForm: FormGroup;\n  selectedInsuranceType_Id: any;\n  submitted = false;\n\n  constructor(private fb: FormBuilder, private insuranceTypeService:InsuranceTypeService, private router:Router, private route:ActivatedRoute) {\n  }\n\n\n  createForm() {\n    this.insuranceTypeForm = this.fb.group({\n      insurance_type_id: [''],\n      name: ['', [Validators.required,Validators.maxLength(50)]],\n    });\n  }\n\n  onSubmit(){\n    this.submitted = true;\n    if (this.insuranceTypeForm.valid) {\n      if(this.insuranceTypeService.selectedMode == 'Create'){\n        this.createInsuranceType();\n      }\n      else if (this.insuranceTypeService.selectedMode == 'Edit'){\n        this.updateInsuranceType();\n      }\n    }\n  }\n\n  getInsuranceTypeById(insuranceType_id:number){\n    this.insuranceTypeService.getInsuranceTypeById(insuranceType_id)\n    .subscribe(\n        res => {\n        this.insuranceTypeForm.patchValue(res[0]);\n        },\n        err => {\n          console.log(err);\n        }\n      );\n  }\n\n  createInsuranceType(){\n    this.insuranceTypeService.createInsuranceType(this.insuranceTypeForm.value)\n    .subscribe(\n      res => {\n        this.insuranceTypeService.refreshList.next(true);\n        this.insuranceTypeForm.reset();\n      },\n      err => {\n        console.log(err);\n      }\n    );\n  }\n\n  updateInsuranceType(){\n    this.insuranceTypeService.updateInsuranceType(this.insuranceTypeForm.value)\n    .subscribe(\n      res => {\n          this.insuranceTypeService.refreshList.next(true);\n      },\n      err => {\n        console.log(err);\n      }\n    );\n  }\n\n  deleteInsuranceType(event){\n    if(this.selectedInsuranceType_Id)\n    {\n      this.insuranceTypeService.deleteInsuranceType(this.selectedInsuranceType_Id).subscribe(\n        res => {\n          this.insuranceTypeService.refreshList.next(true);\n          this.router.navigate(['/insuranceType/add']);\n        },\n        err => {\n          console.log(err);\n        }\n      );\n    }\n    else{\n      this.insuranceTypeForm.reset();\n    }\n  }\n\n  ngOnInit() {\n    this.createForm();\n\n    this.insuranceTypeService.selectedInsuranceTypeId\n    .subscribe(\n      res => {\n        this.selectedInsuranceType_Id = res;\n        if(this.insuranceTypeService.selectedMode == \"Edit\"){\n          this.title = \"Edit Insurance Type\";\n          this.mode = \"delete\";\n          this.getInsuranceTypeById(res);\n        }\n      },\n      err => {\n\n      }\n    );\n  }\n\n}\n","module.exports = \"<section class=\\\"container-fluid section-list\\\">\\n  <div>\\n    <app-search (searchTermValueChanged)=\\\"searchInsuranceTypes($event)\\\" (isCreate)=\\\"createInsuranceType('Create')\\\"></app-search>\\n  </div>\\n  <div>\\n    <table class=\\\"table\\\">\\n      <thead class=\\\"#f5f5f5 grey lighten-4\\\">\\n        <tr>\\n          <th>#</th>\\n          <th>Name</th>\\n          <th>Edit</th>\\n        </tr>\\n      </thead>\\n      <tbody>\\n        <tr *ngFor='let insuranceType of results$ | async'>\\n          <th scope=\\\"row\\\">{{insuranceType.insurance_type_id}}</th>\\n          <td>{{insuranceType.name}}</td>\\n          <td class=\\\"pointer\\\" (click)=\\\"selectInsuranceType(insuranceType.insurance_type_id, 'Edit')\\\">\\n              <i class=\\\"fa fa-pencil\\\"></i>\\n          </td>\\n        </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n</section>\\n\"","module.exports = \"\"","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Router,ActivatedRoute } from '@angular/router';\n\nimport { InsuranceType } from 'app/data-model';\nimport { InsuranceTypeService } from 'app/services/insurance-type/insurance-type.service';\n\n@Component({\n  selector: 'app-insuranceType-list',\n  templateUrl: './insurance-type-list.component.html',\n  styleUrls: ['./insurance-type-list.component.scss']\n})\nexport class InsuranceTypeListComponent implements OnInit {\n  @Input()\n  results$: Observable<InsuranceType>;\n\n  @Output()\n  searchTerm = new EventEmitter();\n\n  constructor(private insuranceTypeService:InsuranceTypeService, private router:Router, private route:ActivatedRoute) { }\n\n  ngOnInit() {\n    this.router.navigate(['/insuranceType/add']);\n  }\n\n  searchInsuranceTypes(search: string){\n    this.searchTerm.emit(search);\n  }\n\n  //On Click of the Add Button\n  createInsuranceType(mode:any){\n    this.insuranceTypeService.selectedMode = mode;\n    this.router.navigate(['/insuranceType/add']);\n  }\n\n  //On Click of the Edit Button\n  selectInsuranceType(insuranceType_id:number, mode:any){\n    this.insuranceTypeService.selectedMode = mode;\n    this.router.navigate(['/insuranceType/edit']);\n    setTimeout(() => {\n      this.insuranceTypeService.selectedInsuranceTypeId.next(insuranceType_id);\n    }, 100);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { InsuranceTypeComponent} from './insurance-type.component';\nimport { InsuranceTypeListComponent} from './insurance-type-list/insurance-type-list.component';\nimport { InsuranceTypeFormComponent} from './insurance-type-form/insurance-type-form.component';\n\nconst insuranceTypeRoutes: Routes = [\n  {\n    path: 'insuranceType',\n    component: InsuranceTypeComponent,\n    children: [\n        {path: 'list',component: InsuranceTypeListComponent},\n        {path: 'add', component: InsuranceTypeFormComponent},\n        {path: 'edit', component: InsuranceTypeFormComponent}\n      ]\n}];\n\n@NgModule({\n  imports: [RouterModule.forChild(insuranceTypeRoutes)],\n  exports: [RouterModule]\n})\n export class InsuranceTypeRoutingModule { }\n","module.exports = \"<header class=\\\"header\\\">\\n  <div class=\\\"col-12\\\">\\n    <app-title [title]=title></app-title>\\n  </div>\\n</header>\\n\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-4\\\">\\n  <app-insuranceType-list (searchTerm)=\\\"searchInsuranceTypes($event)\\\" [results$]=\\\"insuranceTypes$\\\"></app-insuranceType-list>\\n  </div>\\n  <div class=\\\"col-8\\\">\\n    <router-outlet></router-outlet>\\n  </div>\\n</div>\\n\"","module.exports = \"\"","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Subscription } from 'rxjs/Subscription';\nimport { Observable } from 'rxjs/Observable';\nimport { EmptyObservable } from 'rxjs/observable/EmptyObservable';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { InsuranceType } from 'app/data-model';\nimport { InsuranceTypeService } from 'app/services/insurance-type/insurance-type.service';\n\n@Component({\n  selector: 'app-make',\n  templateUrl: './insurance-type.component.html',\n  styleUrls: ['./insurance-type.component.scss']\n})\nexport class InsuranceTypeComponent implements OnInit {\n  title : string = \"Insurance Type\";\n  selectedInsuranceType : InsuranceType;\n\n  insuranceTypes$: Observable<InsuranceType>;\n\n  constructor(private fb: FormBuilder, private insuranceTypeService:InsuranceTypeService, private router: Router, private route: ActivatedRoute) {\n\n  }\n\n  ngOnInit() {\n    this.getInsuranceTypes();\n    this.insuranceTypeService.refreshList.subscribe(\n      res=>{\n          this.getInsuranceTypes();\n      },\n      err => {\n        console.log(err);\n      }\n    );\n  }\n\n  getInsuranceTypes()  {\n    this.insuranceTypes$ = this.insuranceTypeService.getInsuranceTypes();\n  }\n\n  searchInsuranceTypes(searchTerm){\n    if(searchTerm){\n      this.insuranceTypes$ = this.insuranceTypeService.searchInsuranceTypes(searchTerm);\n    }\n    else{\n      this.insuranceTypes$ = new EmptyObservable();\n    }\n  }\n\n}\n"],"sourceRoot":""}