{"version":3,"sources":["webpack:///./node_modules/rxjs-compat/_esm5/observable/EmptyObservable.js","webpack:///./src/app/services/color/color.service.ts","webpack:///./src/app/services/expense/expense.service.ts","webpack:///./src/app/services/fuel-type/fuel-type.service.ts","webpack:///./src/app/services/insurance-type/insurance-type.service.ts","webpack:///./src/app/services/insurance/insurance.service.ts","webpack:///./src/app/services/make/make.service.ts","webpack:///./src/app/services/model/model.service.ts","webpack:///./src/app/services/transaction-type/transaction-type.service.ts","webpack:///./src/app/services/transmission-type/transmission-type.service.ts","webpack:///./src/app/services/variant/variant.service.ts","webpack:///./src/app/services/vehicle-type/vehicle-type.service.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Observable, empty } from 'rxjs';\nvar EmptyObservable = (function (_super) {\n    __extends(EmptyObservable, _super);\n    function EmptyObservable() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    EmptyObservable.create = function (scheduler) {\n        return empty(scheduler);\n    };\n    return EmptyObservable;\n}(Observable));\nexport { EmptyObservable };\n//# sourceMappingURL=EmptyObservable.js.map","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\n\nimport { Color } from '../../data-model';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs';\nimport 'rxjs/add/operator/catch';\nimport { map } from 'rxjs/operators';\nimport { RequestOptions } from '@angular/http';\nimport {Subject} from 'rxjs/Subject';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nconst httpOptions = {\n  headers: { 'Content-Type': 'application/json' }\n};\n\n\n@Injectable()\nexport class ColorService {\n  private apiUrl = environment.API_URL;\n  selectedColorId :Subject<any> = new Subject();\n  selectedMode :string = \"Create\";\n  refreshList:Subject<any> = new Subject();\n\n  constructor(private http:HttpClient) {\n  }\n\n  public getColors(): Observable<any> {\n    return this.http.get(this.apiUrl+'/api/colors', {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public getColorById(color_id:number): Observable<any> {\n    return this.http.get(this.apiUrl+'/api/colors/'+color_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public searchColors(searchTerm): Observable<any> {\n    return this.http.get(this.apiUrl+'/api/colors/search/'+searchTerm, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public createColor(newColor:Color): Observable<any> {\n    const body = JSON.stringify(newColor);\n\n    return this.http.post(this.apiUrl+'/api/colors', body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public updateColor(editColor:Color): Observable<any> {\n    const body = JSON.stringify(editColor);\n    const color_id = editColor.color_id;\n\n    return this.http.put(\"http://localhost:3000/api/colors/\"+color_id, body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public deleteColor(color_id:number): Observable<any> {\n    return this.http.delete(this.apiUrl+'/api/colors/'+color_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  extractData(res: Response) {\n    let body = res.json();\n    return body || {};\n  }\n\n  handleErrorObservable (error: Response | any) {\n    console.error(error.message || error);\n    return Observable.throw(error.message || error);\n  }\n  private handleError (error: any) {\n    let errMsg = (error.message) ? error.message :\n    error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    console.log(errMsg); // log to console instead\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\n\nimport { Expense } from '../../data-model';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs';\nimport 'rxjs/add/operator/catch';\nimport { map } from 'rxjs/operators';\nimport { RequestOptions } from '@angular/http';\nimport { Subject } from 'rxjs/Subject';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nconst httpOptions = {\n  headers: { 'Content-Type': 'application/json' }\n};\n\n\n@Injectable()\nexport class ExpenseService {\n  private apiUrl = environment.API_URL;\n  selectedExpenseId :Subject<any> = new Subject();\n  selectedMode :string = \"Create\";\n  refreshList:Subject<any> = new Subject();\n\n  constructor(private http:HttpClient) {\n  }\n\n  public getExpenses(): Observable<any> {\n    return this.http.get(this.apiUrl+'/api/expenses', {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public getExpenseById(expense_id:number): Observable<any> {\n    return this.http.get(this.apiUrl+'/api/expenses/'+expense_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public searchExpenses(searchTerm): Observable<any> {\n    return this.http.get(this.apiUrl+'/api/expenses/search/'+searchTerm, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public createExpense(newExpense:Expense): Observable<any> {\n    const body = JSON.stringify(newExpense);\n\n    return this.http.post(this.apiUrl+'/api/expenses', body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public updateExpense(editExpense:Expense): Observable<any> {\n    const body = JSON.stringify(editExpense);\n    const expense_id = editExpense.expense_id;\n\n    return this.http.put(\"http://localhost:3000/api/expenses/\"+expense_id, body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public deleteExpense(expense_id:number): Observable<any> {\n    return this.http.delete(this.apiUrl+'/api/expenses/'+expense_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  extractData(res: Response) {\n    let body = res.json();\n    return body || {};\n  }\n\n  handleErrorObservable (error: Response | any) {\n    console.error(error.message || error);\n    return Observable.throw(error.message || error);\n  }\n  private handleError (error: any) {\n    let errMsg = (error.message) ? error.message :\n    error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    console.log(errMsg); // log to console instead\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\n\nimport { FuelType } from '../../data-model';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs';\nimport 'rxjs/add/operator/catch';\nimport { map } from 'rxjs/operators';\nimport { RequestOptions } from '@angular/http';\nimport {Subject} from 'rxjs/Subject';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nconst httpOptions = {\n  headers: { 'Content-Type': 'application/json' }\n};\n\n\n@Injectable()\nexport class FuelTypeService {\n  private apiUrl = environment.API_URL;\n  selectedFuelTypeId :Subject<any> = new Subject();\n  selectedMode :string = \"Create\";\n  refreshList:Subject<any> = new Subject();\n\n  constructor(private http:HttpClient) {\n  }\n\n  public getFuelTypes(): Observable<any> {\n    return this.http.get(this.apiUrl+'/api/fuelTypes', {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public getFuelTypeById(fuel_type_id:number): Observable<any> {\n    return this.http.get(this.apiUrl+'/api/fuelTypes/'+fuel_type_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public searchFuelTypes(searchTerm): Observable<any> {\n    return this.http.get(this.apiUrl+'/api/fuelTypes/search/'+searchTerm, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public createFuelType(newFuelType:FuelType): Observable<any> {\n    const body = JSON.stringify(newFuelType);\n\n    return this.http.post(this.apiUrl+'/api/fuelTypes', body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public updateFuelType(editFuelType:FuelType): Observable<any> {\n    const body = JSON.stringify(editFuelType);\n    const fuel_type_id = editFuelType.fuel_type_id;\n\n    return this.http.put(\"http://localhost:3000/api/fuelTypes/\"+fuel_type_id, body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public deleteFuelType(fuel_type_id:number): Observable<any> {\n    return this.http.delete(this.apiUrl+'/api/fuelTypes/'+fuel_type_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  extractData(res: Response) {\n    let body = res.json();\n    return body || {};\n  }\n\n  handleErrorObservable (error: Response | any) {\n    console.error(error.message || error);\n    return Observable.throw(error.message || error);\n  }\n  private handleError (error: any) {\n    let errMsg = (error.message) ? error.message :\n    error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    console.log(errMsg); // log to console instead\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\n\nimport { InsuranceType } from '../../data-model';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs';\nimport 'rxjs/add/operator/catch';\nimport { map } from 'rxjs/operators';\nimport { RequestOptions } from '@angular/http';\nimport {Subject} from 'rxjs/Subject';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nconst httpOptions = {\n  headers: { 'Content-Type': 'application/json' }\n};\n\n\n@Injectable()\nexport class InsuranceTypeService {\n  private apiUrl = environment.API_URL;\n  selectedInsuranceTypeId :Subject<any> = new Subject();\n  selectedMode :string = \"Create\";\n  refreshList:Subject<any> = new Subject();\n\n  constructor(private http:HttpClient) {\n  }\n\n  public getInsuranceTypes(): Observable<any> {\n    return this.http.get(this.apiUrl+'/api/insuranceTypes', {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public getInsuranceTypeById(insurance_type_id:number): Observable<any> {\n    return this.http.get(this.apiUrl+'/api/insuranceTypes/'+insurance_type_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public searchInsuranceTypes(searchTerm): Observable<any> {\n    return this.http.get(this.apiUrl+'/api/insuranceTypes/search/'+searchTerm, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public createInsuranceType(newInsuranceType:InsuranceType): Observable<any> {\n    const body = JSON.stringify(newInsuranceType);\n\n    return this.http.post(this.apiUrl+'/api/insuranceTypes', body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public updateInsuranceType(editInsuranceType:InsuranceType): Observable<any> {\n    const body = JSON.stringify(editInsuranceType);\n    const insurance_type_id = editInsuranceType.insurance_type_id;\n\n    return this.http.put(\"http://localhost:3000/api/insuranceTypes/\"+insurance_type_id, body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public deleteInsuranceType(insurance_type_id:number): Observable<any> {\n    return this.http.delete(this.apiUrl+'/api/insuranceTypes/'+insurance_type_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  extractData(res: Response) {\n    let body = res.json();\n    return body || {};\n  }\n\n  handleErrorObservable (error: Response | any) {\n    console.error(error.message || error);\n    return Observable.throw(error.message || error);\n  }\n  private handleError (error: any) {\n    let errMsg = (error.message) ? error.message :\n    error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    console.log(errMsg); // log to console instead\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\n\nimport { Insurance } from '../../data-model';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs';\nimport 'rxjs/add/operator/catch';\nimport { map } from 'rxjs/operators';\nimport { RequestOptions } from '@angular/http';\nimport {Subject} from 'rxjs/Subject';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nconst httpOptions = {\n  headers: { 'Content-Type': 'application/json' }\n};\n\n\n@Injectable()\nexport class InsuranceService {\n  private apiUrl = environment.API_URL;\n  selectedInsuranceId :Subject<any> = new Subject();\n  selectedMode :string = \"Create\";\n  refreshList:Subject<any> = new Subject();\n\n  constructor(private http:HttpClient) {\n  }\n\n  public getInsurances(): Observable<any> {\n    return this.http.get(this.apiUrl+'/api/insurances', {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public getInsuranceById(insurance_id:number): Observable<any> {\n    return this.http.get(this.apiUrl+'/api/insurances/'+insurance_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public searchInsurances(searchTerm): Observable<any> {\n    return this.http.get(this.apiUrl+'/api/insurances/search/'+searchTerm, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public createInsurance(newInsurance:Insurance): Observable<any> {\n    const body = JSON.stringify(newInsurance);\n\n    return this.http.post(this.apiUrl+'/api/insurances', body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public updateInsurance(editInsurance:Insurance): Observable<any> {\n    const body = JSON.stringify(editInsurance);\n    const insurance_id = editInsurance.insurance_id;\n\n    return this.http.put(\"http://localhost:3000/api/insurances/\"+insurance_id, body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public deleteInsurance(insurance_id:number): Observable<any> {\n    return this.http.delete(this.apiUrl+'/api/insurances/'+insurance_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  extractData(res: Response) {\n    let body = res.json();\n    return body || {};\n  }\n\n  handleErrorObservable (error: Response | any) {\n    console.error(error.message || error);\n    return Observable.throw(error.message || error);\n  }\n  private handleError (error: any) {\n    let errMsg = (error.message) ? error.message :\n    error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    console.log(errMsg); // log to console instead\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\n\nimport { Make } from '../../data-model';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs';\nimport 'rxjs/add/operator/catch';\nimport { map } from 'rxjs/operators';\nimport { RequestOptions } from '@angular/http';\nimport {Subject} from 'rxjs/Subject';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nconst httpOptions = {\n  headers: { 'Content-Type': 'application/json' }\n};\n\n\n@Injectable()\nexport class MakeService {\n  private apiUrl = environment.API_URL;\n  selectedMakeId :Subject<any> = new Subject();\n  selectedMode :string = \"Create\";\n  refreshList:Subject<any> = new Subject();\n\n  constructor(private http:HttpClient) {\n  }\n\n  public getMakes(): Observable<any> {\n    var x = this.apiUrl+'/api/makes';\n    return this.http.get(this.apiUrl+'/api/makes', {headers: {'Content-Type': 'application/json; charset=utf-8'}});\n    //.map(res => res);\n  }\n\n  public getMakeById(make_id:number): Observable<any> {\n    return this.http.get(this.apiUrl+'/api/makes/'+make_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public searchMakes(searchTerm): Observable<any> {\n    return this.http.get(this.apiUrl+'/api/makes/search/'+searchTerm, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public createMake(newMake:Make): Observable<any> {\n    const body = JSON.stringify(newMake);\n\n    return this.http.post(this.apiUrl+'/api/makes', body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public updateMake(editMake:Make): Observable<any> {\n    const body = JSON.stringify(editMake);\n    const make_id = editMake.make_id;\n\n    return this.http.put(this.apiUrl+'/api/makes/'+make_id, body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public deleteMake(make_id:number): Observable<any> {\n    return this.http.delete(this.apiUrl+'/api/makes/'+make_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  extractData(res: Response) {\n    let body = res.json();\n    return body || {};\n  }\n\n  handleErrorObservable (error: Response | any) {\n    console.error(error.message || error);\n    return Observable.throw(error.message || error);\n  }\n  private handleError (error: any) {\n    let errMsg = (error.message) ? error.message :\n    error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    console.log(errMsg); // log to console instead\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\n\nimport { Model } from '../../data-model';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs';\nimport 'rxjs/add/operator/catch';\nimport { map } from 'rxjs/operators';\nimport { RequestOptions } from '@angular/http';\nimport {Subject} from 'rxjs/Subject';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nconst httpOptions = {\n  headers: { 'Content-Type': 'application/json' }\n};\n\n\n@Injectable()\nexport class ModelService {\n  private apiUrl = environment.API_URL;\n  selectedModelId :Subject<any> = new Subject();\n  selectedMode :string = \"Create\";\n  refreshList:Subject<any> = new Subject();\n\n  constructor(private http:HttpClient) {\n  }\n\n  public getModels(): Observable<any> {\n    return this.http.get(this.apiUrl+'/api/models', {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n   .map(res => res);\n  }\n\n  public getModelById(model_id:number): Observable<any> {\n    return this.http.get(this.apiUrl+'/api/models/'+model_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public searchModels(searchTerm): Observable<any> {\n    return this.http.get(this.apiUrl+'/api/models/search/'+searchTerm, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public createModel(newModel:Model): Observable<any> {\n    const body = JSON.stringify(newModel);\n\n    return this.http.post(this.apiUrl+'/api/models', body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public updateModel(editModel:Model): Observable<any> {\n    const body = JSON.stringify(editModel);\n    const model_id = editModel.model_id;\n\n    return this.http.put(\"http://localhost:3000/api/models/\"+model_id, body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public deleteModel(model_id:number): Observable<any> {\n    return this.http.delete(this.apiUrl+'/api/models/'+model_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  extractData(res: Response) {\n    let body = res.json();\n    return body || {};\n  }\n\n  handleErrorObservable (error: Response | any) {\n    console.error(error.message || error);\n    return Observable.throw(error.message || error);\n  }\n  private handleError (error: any) {\n    let errMsg = (error.message) ? error.message :\n    error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    console.log(errMsg); // log to console instead\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\n\nimport { TransactionType } from '../../data-model';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs';\nimport 'rxjs/add/operator/catch';\nimport { map } from 'rxjs/operators';\nimport { RequestOptions } from '@angular/http';\nimport {Subject} from 'rxjs/Subject';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nconst httpOptions = {\n  headers: { 'Content-Type': 'application/json' }\n};\n\n\n@Injectable()\nexport class TransactionTypeService {\n  private apiUrl = environment.API_URL;\n  selectedTransactionTypeId :Subject<any> = new Subject();\n  selectedMode :string = \"Create\";\n  refreshList:Subject<any> = new Subject();\n\n  constructor(private http:HttpClient) {\n  }\n\n  public getTransactionTypes(): Observable<any> {\n    return this.http.get(this.apiUrl+'/api/transactionTypes', {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n  public getTransactionTypesForClient(): Observable<any> {\n    return this.http.get(this.apiUrl+'/api/transactionTypes/client', {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public getTransactionTypeById(transaction_type_id:number): Observable<any> {\n    return this.http.get(this.apiUrl+'/api/transactionTypes/'+transaction_type_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public searchTransactionTypes(searchTerm): Observable<any> {\n    return this.http.get(this.apiUrl+'/api/transactionTypes/search/'+searchTerm, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public createTransactionType(newTransactionType:TransactionType): Observable<any> {\n    const body = JSON.stringify(newTransactionType);\n\n    return this.http.post(this.apiUrl+'/api/transactionTypes', body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public updateTransactionType(editTransactionType:TransactionType): Observable<any> {\n    const body = JSON.stringify(editTransactionType);\n    const transaction_type_id = editTransactionType.transaction_type_id;\n\n    return this.http.put(\"http://localhost:3000/api/transactionTypes/\"+transaction_type_id, body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public deleteTransactionType(transaction_type_id:number): Observable<any> {\n    return this.http.delete(this.apiUrl+'/api/transactionTypes/'+transaction_type_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  extractData(res: Response) {\n    let body = res.json();\n    return body || {};\n  }\n\n  handleErrorObservable (error: Response | any) {\n    console.error(error.message || error);\n    return Observable.throw(error.message || error);\n  }\n  private handleError (error: any) {\n    let errMsg = (error.message) ? error.message :\n    error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    console.log(errMsg); // log to console instead\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\n\nimport { TransmissionType } from '../../data-model';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs';\nimport 'rxjs/add/operator/catch';\nimport { map } from 'rxjs/operators';\nimport { RequestOptions } from '@angular/http';\nimport {Subject} from 'rxjs/Subject';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nconst httpOptions = {\n  headers: { 'Content-Type': 'application/json' }\n};\n\n\n@Injectable()\nexport class TransmissionTypeService {\n  private apiUrl = environment.API_URL;\n  selectedTransmissionTypeId :Subject<any> = new Subject();\n  selectedMode :string = \"Create\";\n  refreshList:Subject<any> = new Subject();\n\n  constructor(private http:HttpClient) {\n  }\n\n  public getTransmissionTypes(): Observable<any> {\n    return this.http.get(this.apiUrl+'/api/transmissionTypes', {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public getTransmissionTypeById(transmission_type_id:number): Observable<any> {\n    return this.http.get(this.apiUrl+'/api/transmissionTypes/'+transmission_type_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public searchTransmissionTypes(searchTerm): Observable<any> {\n    return this.http.get(this.apiUrl+'/api/transmissionTypes/search/'+searchTerm, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public createTransmissionType(newTransmissionType:TransmissionType): Observable<any> {\n    const body = JSON.stringify(newTransmissionType);\n\n    return this.http.post(this.apiUrl+'/api/transmissionTypes', body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public updateTransmissionType(editTransmissionType:TransmissionType): Observable<any> {\n    const body = JSON.stringify(editTransmissionType);\n    const transmission_type_id = editTransmissionType.transmission_type_id;\n\n    return this.http.put(\"http://localhost:3000/api/transmissionTypes/\"+transmission_type_id, body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public deleteTransmissionType(transmission_type_id:number): Observable<any> {\n    return this.http.delete(this.apiUrl+'/api/transmissionTypes/'+transmission_type_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  extractData(res: Response) {\n    let body = res.json();\n    return body || {};\n  }\n\n  handleErrorObservable (error: Response | any) {\n    console.error(error.message || error);\n    return Observable.throw(error.message || error);\n  }\n  private handleError (error: any) {\n    let errMsg = (error.message) ? error.message :\n    error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    console.log(errMsg); // log to console instead\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\n\nimport { Variant } from '../../data-model';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs';\nimport 'rxjs/add/operator/catch';\nimport { map } from 'rxjs/operators';\nimport { RequestOptions } from '@angular/http';\nimport {Subject} from 'rxjs/Subject';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nconst httpOptions = {\n  headers: { 'Content-Type': 'application/json' }\n};\n\n\n@Injectable()\nexport class VariantService {\n  private apiUrl = environment.API_URL;\n  selectedVariantId :Subject<any> = new Subject();\n  selectedMode :string = \"Create\";\n  refreshList:Subject<any> = new Subject();\n\n  constructor(private http:HttpClient) {\n  }\n\n  public getVariants(): Observable<any> {\n    return this.http.get(this.apiUrl+'/api/variants', {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public getVariantById(variant_id:number): Observable<any> {\n    return this.http.get(this.apiUrl+'/api/variants/'+variant_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public searchVariants(searchTerm): Observable<any> {\n    return this.http.get(this.apiUrl+'/api/variants/search/'+searchTerm, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public createVariant(newVariant:Variant): Observable<any> {\n    const body = JSON.stringify(newVariant);\n\n    return this.http.post(this.apiUrl+'/api/variants', body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public updateVariant(editVariant:Variant): Observable<any> {\n    const body = JSON.stringify(editVariant);\n    const variant_id = editVariant.variant_id;\n\n    return this.http.put(\"http://localhost:3000/api/variants/\"+variant_id, body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public deleteVariant(variant_id:number): Observable<any> {\n    return this.http.delete(this.apiUrl+'/api/variants/'+variant_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  extractData(res: Response) {\n    let body = res.json();\n    return body || {};\n  }\n\n  handleErrorObservable (error: Response | any) {\n    console.error(error.message || error);\n    return Observable.throw(error.message || error);\n  }\n  private handleError (error: any) {\n    let errMsg = (error.message) ? error.message :\n    error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    console.log(errMsg); // log to console instead\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\n\nimport { VehicleType } from '../../data-model';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs';\nimport 'rxjs/add/operator/catch';\nimport { map } from 'rxjs/operators';\nimport { RequestOptions } from '@angular/http';\nimport {Subject} from 'rxjs/Subject';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nconst httpOptions = {\n  headers: { 'Content-Type': 'application/json' }\n};\n\n\n@Injectable()\nexport class VehicleTypeService {\n  private apiUrl = environment.API_URL;\n  selectedVehicleTypeId :Subject<any> = new Subject();\n  selectedMode :string = \"Create\";\n  refreshList:Subject<any> = new Subject();\n\n  constructor(private http:HttpClient) {\n  }\n\n  public getVehicleTypes(): Observable<any> {\n    return this.http.get(this.apiUrl+'/api/vehicleTypes', {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public getVehicleTypeById(vehicle_type_id:number): Observable<any> {\n    return this.http.get(this.apiUrl+'/api/vehicleTypes/'+vehicle_type_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public searchVehicleTypes(searchTerm): Observable<any> {\n    return this.http.get(this.apiUrl+'/api/vehicleTypes/search/'+searchTerm, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public createVehicleType(newVehicleType:VehicleType): Observable<any> {\n    const body = JSON.stringify(newVehicleType);\n\n    return this.http.post(this.apiUrl+'/api/vehicleTypes', body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public updateVehicleType(editVehicleType:VehicleType): Observable<any> {\n    const body = JSON.stringify(editVehicleType);\n    const vehicle_type_id = editVehicleType.vehicle_type_id;\n\n    return this.http.put(\"http://localhost:3000/api/vehicleTypes/\"+vehicle_type_id, body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public deleteVehicleType(vehicle_type_id:number): Observable<any> {\n    return this.http.delete(this.apiUrl+'/api/vehicleTypes/'+vehicle_type_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  extractData(res: Response) {\n    let body = res.json();\n    return body || {};\n  }\n\n  handleErrorObservable (error: Response | any) {\n    console.error(error.message || error);\n    return Observable.throw(error.message || error);\n  }\n  private handleError (error: any) {\n    let errMsg = (error.message) ? error.message :\n    error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    console.log(errMsg); // log to console instead\n  }\n}\n"],"sourceRoot":""}