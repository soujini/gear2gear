{"version":3,"sources":["webpack:///./src/app/services/client/client.service.ts","webpack:///./src/app/services/color/color.service.ts","webpack:///./src/app/services/expense/expense.service.ts","webpack:///./src/app/services/fuel-type/fuel-type.service.ts","webpack:///./src/app/services/insurance-type/insurance-type.service.ts","webpack:///./src/app/services/insurance/insurance.service.ts","webpack:///./src/app/services/make/make.service.ts","webpack:///./src/app/services/model/model.service.ts","webpack:///./src/app/services/transmission-type/transmission-type.service.ts","webpack:///./src/app/services/variant/variant.service.ts","webpack:///./src/app/services/vehicle-type/vehicle-type.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAA2C;AACoB;AAI7B;AAED;AAGI;AAGrC,IAAM,WAAW,GAAG;IAClB,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;CAChD,CAAC;AAIF;IAQE,uBAAoB,IAAe;QAAf,SAAI,GAAJ,IAAI,CAAW;QAP3B,eAAU,GAAG,cAAc,CAAC;QAC5B,WAAM,GAAG,cAAc,CAAC;QAChC,qBAAgB,GAAiB,IAAI,oDAAO,EAAE,CAAC;QAC/C,iBAAY,GAAW,QAAQ,CAAC;QAChC,gBAAW,GAAgB,IAAI,oDAAO,EAAE,CAAC;IAIzC,CAAC;IAEM,kCAAU,GAAjB;QACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,mCAAmC,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aACxH,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IACM,oCAAY,GAAnB;QACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,qCAAqC,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aAC1H,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IACM,sDAA8B,GAArC,UAAsC,MAAa;QACjD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,kEAAkE,GAAC,MAAM,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aAC9J,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IACM,2CAAmB,GAA1B,UAA2B,WAAkB;QAC3C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,sCAAsC,GAAC,WAAW,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aACvI,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,8CAAsB,GAA7B,UAA8B,QAAY;QACxC,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACtC,IAAM,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC;QACzC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,oCAAoC,GAAC,WAAW,EAAE,IAAI,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aAC7I,SAAS,CACR,aAAG;YACH,OAAO,CAAC,GAAG,CAAC,6CAA6C,EAAE,GAAG,CAAC,CAAC;QAClE,CAAC,EACD,aAAG;YACA,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;QAC9B,CAAC,EACD;YACE,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAC3B,CAAC,CACF,CAAC;IACF,CAAC;IAEM,2CAAmB,GAA1B,UAA2B,QAAY;QACrC,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACtC,IAAM,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC;QACzC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,6CAA6C,GAAC,WAAW,EAAE,IAAI,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aACtJ,SAAS,CACR,aAAG;YACH,OAAO,CAAC,GAAG,CAAC,6CAA6C,EAAE,GAAG,CAAC,CAAC;QAClE,CAAC,EACD,aAAG;YACA,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;QAC9B,CAAC,EACD;YACE,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAC3B,CAAC,CACF,CAAC;IACF,CAAC;IAEM,qCAAa,GAApB,UAAqB,SAAgB;QACnC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,oCAAoC,GAAC,SAAS,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aACnI,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,qCAAa,GAApB,UAAqB,UAAU;QAC7B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,2CAA2C,GAAC,UAAU,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aAC3I,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,oCAAY,GAAnB,UAAoB,SAAgB;QAClC,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QAEvC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,mCAAmC,EAAE,IAAI,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aAC/H,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,oCAAY,GAAnB,UAAoB,UAAiB;QACnC,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QACxC,IAAM,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC;QAEvC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,oCAAoC,GAAC,SAAS,EAAE,IAAI,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aACzI,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,oCAAY,GAAnB,UAAoB,SAAgB;QAClC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,oCAAoC,GAAC,SAAS,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aACtI,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAED,mCAAW,GAAX,UAAY,GAAa;QACvB,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC;IACpB,CAAC;IAED,6CAAqB,GAArB,UAAuB,KAAqB;QAC1C,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;QACtC,MAAM,CAAC,+CAAU,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;IAClD,CAAC;IAEO,mCAAW,GAAnB,UAAqB,KAAU;QAC7B,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC9C,KAAK,CAAC,MAAM,CAAC,CAAC,CAAI,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY,CAAC,CAAC,CAAC,cAAc,CAAC;QACxE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,yBAAyB;IAChD,CAAC;IA1GU,aAAa;QADzB,gEAAU,EAAE;yCASc,+DAAU;OARxB,aAAa,CA2GzB;IAAD,oBAAC;CAAA;AA3GyB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBiB;AACoB;AAI7B;AACD;AAGI;AAGrC,IAAM,WAAW,GAAG;IAClB,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;CAChD,CAAC;AAIF;IAOE,sBAAoB,IAAe;QAAf,SAAI,GAAJ,IAAI,CAAW;QAN3B,cAAS,GAAG,aAAa,CAAC;QAC1B,WAAM,GAAG,aAAa,CAAC;QAC/B,oBAAe,GAAiB,IAAI,oDAAO,EAAE,CAAC;QAC9C,iBAAY,GAAW,QAAQ,CAAC;QAChC,gBAAW,GAAgB,IAAI,oDAAO,EAAE,CAAC;IAGzC,CAAC;IAEM,gCAAS,GAAhB;QACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,kCAAkC,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aACvH,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,mCAAY,GAAnB,UAAoB,QAAe;QACjC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,mCAAmC,GAAC,QAAQ,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aACjI,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,mCAAY,GAAnB,UAAoB,UAAU;QAC5B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,0CAA0C,GAAC,UAAU,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aAC1I,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,kCAAW,GAAlB,UAAmB,QAAc;QAC/B,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAEtC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,kCAAkC,EAAE,IAAI,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aAC9H,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,kCAAW,GAAlB,UAAmB,SAAe;QAChC,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QACvC,IAAM,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC;QAEpC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,mCAAmC,GAAC,QAAQ,EAAE,IAAI,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aACvI,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,kCAAW,GAAlB,UAAmB,QAAe;QAChC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,mCAAmC,GAAC,QAAQ,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aACpI,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAED,kCAAW,GAAX,UAAY,GAAa;QACvB,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC;IACpB,CAAC;IAED,4CAAqB,GAArB,UAAuB,KAAqB;QAC1C,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;QACtC,MAAM,CAAC,+CAAU,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;IAClD,CAAC;IACO,kCAAW,GAAnB,UAAqB,KAAU;QAC7B,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC9C,KAAK,CAAC,MAAM,CAAC,CAAC,CAAI,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY,CAAC,CAAC,CAAC,cAAc,CAAC;QACxE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,yBAAyB;IAChD,CAAC;IA1DU,YAAY;QADxB,gEAAU,EAAE;yCAQc,+DAAU;OAPxB,YAAY,CA2DxB;IAAD,mBAAC;CAAA;AA3DwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBkB;AACoB;AAI7B;AACD;AAGM;AAGvC,IAAM,WAAW,GAAG;IAClB,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;CAChD,CAAC;AAIF;IAOE,wBAAoB,IAAe;QAAf,SAAI,GAAJ,IAAI,CAAW;QAN3B,gBAAW,GAAG,eAAe,CAAC;QAC9B,WAAM,GAAG,eAAe,CAAC;QACjC,sBAAiB,GAAiB,IAAI,oDAAO,EAAE,CAAC;QAChD,iBAAY,GAAW,QAAQ,CAAC;QAChC,gBAAW,GAAgB,IAAI,oDAAO,EAAE,CAAC;IAGzC,CAAC;IAEM,oCAAW,GAAlB;QACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,oCAAoC,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aACzH,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,uCAAc,GAArB,UAAsB,UAAiB;QACrC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,qCAAqC,GAAC,UAAU,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aACrI,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,uCAAc,GAArB,UAAsB,UAAU;QAC9B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,4CAA4C,GAAC,UAAU,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aAC5I,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,sCAAa,GAApB,UAAqB,UAAkB;QACrC,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAExC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,oCAAoC,EAAE,IAAI,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aAChI,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,sCAAa,GAApB,UAAqB,WAAmB;QACtC,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QACzC,IAAM,UAAU,GAAG,WAAW,CAAC,UAAU,CAAC;QAE1C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,qCAAqC,GAAC,UAAU,EAAE,IAAI,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aAC3I,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,sCAAa,GAApB,UAAqB,UAAiB;QACpC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,qCAAqC,GAAC,UAAU,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aACxI,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAED,oCAAW,GAAX,UAAY,GAAa;QACvB,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC;IACpB,CAAC;IAED,8CAAqB,GAArB,UAAuB,KAAqB;QAC1C,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;QACtC,MAAM,CAAC,+CAAU,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;IAClD,CAAC;IACO,oCAAW,GAAnB,UAAqB,KAAU;QAC7B,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC9C,KAAK,CAAC,MAAM,CAAC,CAAC,CAAI,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY,CAAC,CAAC,CAAC,cAAc,CAAC;QACxE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,yBAAyB;IAChD,CAAC;IA1DU,cAAc;QAD1B,gEAAU,EAAE;yCAQc,+DAAU;OAPxB,cAAc,CA2D1B;IAAD,qBAAC;CAAA;AA3D0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBgB;AACoB;AAI7B;AACD;AAGI;AAGrC,IAAM,WAAW,GAAG;IAClB,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;CAChD,CAAC;AAIF;IAOE,yBAAoB,IAAe;QAAf,SAAI,GAAJ,IAAI,CAAW;QAN3B,iBAAY,GAAG,gBAAgB,CAAC;QAChC,WAAM,GAAG,gBAAgB,CAAC;QAClC,uBAAkB,GAAiB,IAAI,oDAAO,EAAE,CAAC;QACjD,iBAAY,GAAW,QAAQ,CAAC;QAChC,gBAAW,GAAgB,IAAI,oDAAO,EAAE,CAAC;IAGzC,CAAC;IAEM,sCAAY,GAAnB;QACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,qCAAqC,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aAC1H,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,yCAAe,GAAtB,UAAuB,YAAmB;QACxC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,sCAAsC,GAAC,YAAY,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aACxI,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,yCAAe,GAAtB,UAAuB,UAAU;QAC/B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,6CAA6C,GAAC,UAAU,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aAC7I,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,wCAAc,GAArB,UAAsB,WAAoB;QACxC,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QAEzC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,qCAAqC,EAAE,IAAI,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aACjI,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,wCAAc,GAArB,UAAsB,YAAqB;QACzC,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;QAC1C,IAAM,YAAY,GAAG,YAAY,CAAC,YAAY,CAAC;QAE/C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,sCAAsC,GAAC,YAAY,EAAE,IAAI,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aAC9I,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,wCAAc,GAArB,UAAsB,YAAmB;QACvC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,sCAAsC,GAAC,YAAY,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aAC3I,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAED,qCAAW,GAAX,UAAY,GAAa;QACvB,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC;IACpB,CAAC;IAED,+CAAqB,GAArB,UAAuB,KAAqB;QAC1C,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;QACtC,MAAM,CAAC,+CAAU,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;IAClD,CAAC;IACO,qCAAW,GAAnB,UAAqB,KAAU;QAC7B,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC9C,KAAK,CAAC,MAAM,CAAC,CAAC,CAAI,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY,CAAC,CAAC,CAAC,cAAc,CAAC;QACxE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,yBAAyB;IAChD,CAAC;IA1DU,eAAe;QAD3B,gEAAU,EAAE;yCAQc,+DAAU;OAPxB,eAAe,CA2D3B;IAAD,sBAAC;CAAA;AA3D2B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBe;AACoB;AAI7B;AACD;AAGI;AAGrC,IAAM,WAAW,GAAG;IAClB,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;CAChD,CAAC;AAIF;IAOE,8BAAoB,IAAe;QAAf,SAAI,GAAJ,IAAI,CAAW;QAN3B,sBAAiB,GAAG,qBAAqB,CAAC;QAC1C,WAAM,GAAG,qBAAqB,CAAC;QACvC,4BAAuB,GAAiB,IAAI,oDAAO,EAAE,CAAC;QACtD,iBAAY,GAAW,QAAQ,CAAC;QAChC,gBAAW,GAAgB,IAAI,oDAAO,EAAE,CAAC;IAGzC,CAAC;IAEM,gDAAiB,GAAxB;QACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,0CAA0C,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aAC/H,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,mDAAoB,GAA3B,UAA4B,iBAAwB;QAClD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,2CAA2C,GAAC,iBAAiB,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aAClJ,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,mDAAoB,GAA3B,UAA4B,UAAU;QACpC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,kDAAkD,GAAC,UAAU,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aAClJ,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,kDAAmB,GAA1B,UAA2B,gBAA8B;QACvD,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;QAE9C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,0CAA0C,EAAE,IAAI,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aACtI,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,kDAAmB,GAA1B,UAA2B,iBAA+B;QACxD,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC;QAC/C,IAAM,iBAAiB,GAAG,iBAAiB,CAAC,iBAAiB,CAAC;QAE9D,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,2CAA2C,GAAC,iBAAiB,EAAE,IAAI,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aACxJ,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,kDAAmB,GAA1B,UAA2B,iBAAwB;QACjD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,2CAA2C,GAAC,iBAAiB,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aACrJ,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAED,0CAAW,GAAX,UAAY,GAAa;QACvB,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC;IACpB,CAAC;IAED,oDAAqB,GAArB,UAAuB,KAAqB;QAC1C,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;QACtC,MAAM,CAAC,+CAAU,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;IAClD,CAAC;IACO,0CAAW,GAAnB,UAAqB,KAAU;QAC7B,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC9C,KAAK,CAAC,MAAM,CAAC,CAAC,CAAI,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY,CAAC,CAAC,CAAC,cAAc,CAAC;QACxE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,yBAAyB;IAChD,CAAC;IA1DU,oBAAoB;QADhC,gEAAU,EAAE;yCAQc,+DAAU;OAPxB,oBAAoB,CA2DhC;IAAD,2BAAC;CAAA;AA3DgC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBU;AACoB;AAI7B;AACD;AAGI;AAGrC,IAAM,WAAW,GAAG;IAClB,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;CAChD,CAAC;AAIF;IAOE,0BAAoB,IAAe;QAAf,SAAI,GAAJ,IAAI,CAAW;QAN3B,kBAAa,GAAG,iBAAiB,CAAC;QAClC,WAAM,GAAG,iBAAiB,CAAC;QACnC,wBAAmB,GAAiB,IAAI,oDAAO,EAAE,CAAC;QAClD,iBAAY,GAAW,QAAQ,CAAC;QAChC,gBAAW,GAAgB,IAAI,oDAAO,EAAE,CAAC;IAGzC,CAAC;IAEM,wCAAa,GAApB;QACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,sCAAsC,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aAC3H,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,2CAAgB,GAAvB,UAAwB,YAAmB;QACzC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,uCAAuC,GAAC,YAAY,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aACzI,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,2CAAgB,GAAvB,UAAwB,UAAU;QAChC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,8CAA8C,GAAC,UAAU,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aAC9I,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,0CAAe,GAAtB,UAAuB,YAAsB;QAC3C,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;QAE1C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,sCAAsC,EAAE,IAAI,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aAClI,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,0CAAe,GAAtB,UAAuB,aAAuB;QAC5C,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;QAC3C,IAAM,YAAY,GAAG,aAAa,CAAC,YAAY,CAAC;QAEhD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,uCAAuC,GAAC,YAAY,EAAE,IAAI,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aAC/I,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,0CAAe,GAAtB,UAAuB,YAAmB;QACxC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,uCAAuC,GAAC,YAAY,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aAC5I,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAED,sCAAW,GAAX,UAAY,GAAa;QACvB,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC;IACpB,CAAC;IAED,gDAAqB,GAArB,UAAuB,KAAqB;QAC1C,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;QACtC,MAAM,CAAC,+CAAU,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;IAClD,CAAC;IACO,sCAAW,GAAnB,UAAqB,KAAU;QAC7B,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC9C,KAAK,CAAC,MAAM,CAAC,CAAC,CAAI,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY,CAAC,CAAC,CAAC,cAAc,CAAC;QACxE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,yBAAyB;IAChD,CAAC;IA1DU,gBAAgB;QAD5B,gEAAU,EAAE;yCAQc,+DAAU;OAPxB,gBAAgB,CA2D5B;IAAD,uBAAC;CAAA;AA3D4B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBc;AACoB;AAI7B;AACD;AAGI;AAGrC,IAAM,WAAW,GAAG;IAClB,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;CAChD,CAAC;AAIF;IAOE,qBAAoB,IAAe;QAAf,SAAI,GAAJ,IAAI,CAAW;QAN3B,aAAQ,GAAG,YAAY,CAAC;QACxB,WAAM,GAAG,YAAY,CAAC;QAC9B,mBAAc,GAAiB,IAAI,oDAAO,EAAE,CAAC;QAC7C,iBAAY,GAAW,QAAQ,CAAC;QAChC,gBAAW,GAAgB,IAAI,oDAAO,EAAE,CAAC;IAGzC,CAAC;IAEM,8BAAQ,GAAf;QACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,iCAAiC,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC,CAAC;QACxH,mBAAmB;IACrB,CAAC;IAEM,iCAAW,GAAlB,UAAmB,OAAc;QAC/B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,kCAAkC,GAAC,OAAO,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aAC/H,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,iCAAW,GAAlB,UAAmB,UAAU;QAC3B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,yCAAyC,GAAC,UAAU,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aACzI,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,gCAAU,GAAjB,UAAkB,OAAY;QAC5B,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAErC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,iCAAiC,EAAE,IAAI,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aAC7H,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,gCAAU,GAAjB,UAAkB,QAAa;QAC7B,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACtC,IAAM,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;QAEjC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,kCAAkC,GAAC,OAAO,EAAE,IAAI,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aACrI,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,gCAAU,GAAjB,UAAkB,OAAc;QAC9B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,kCAAkC,GAAC,OAAO,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aAClI,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAED,iCAAW,GAAX,UAAY,GAAa;QACvB,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC;IACpB,CAAC;IAED,2CAAqB,GAArB,UAAuB,KAAqB;QAC1C,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;QACtC,MAAM,CAAC,+CAAU,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;IAClD,CAAC;IACO,iCAAW,GAAnB,UAAqB,KAAU;QAC7B,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC9C,KAAK,CAAC,MAAM,CAAC,CAAC,CAAI,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY,CAAC,CAAC,CAAC,cAAc,CAAC;QACxE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,yBAAyB;IAChD,CAAC;IA1DU,WAAW;QADvB,gEAAU,EAAE;yCAQc,+DAAU;OAPxB,WAAW,CA2DvB;IAAD,kBAAC;CAAA;AA3DuB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBmB;AACoB;AAI7B;AACD;AAGI;AAGrC,IAAM,WAAW,GAAG;IAClB,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;CAChD,CAAC;AAIF;IAOE,sBAAoB,IAAe;QAAf,SAAI,GAAJ,IAAI,CAAW;QAN3B,cAAS,GAAG,aAAa,CAAC;QAC1B,WAAM,GAAG,aAAa,CAAC;QAC/B,oBAAe,GAAiB,IAAI,oDAAO,EAAE,CAAC;QAC9C,iBAAY,GAAW,QAAQ,CAAC;QAChC,gBAAW,GAAgB,IAAI,oDAAO,EAAE,CAAC;IAGzC,CAAC;IAEM,gCAAS,GAAhB;QACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,kCAAkC,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aACvH,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,mCAAY,GAAnB,UAAoB,QAAe;QACjC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,mCAAmC,GAAC,QAAQ,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aACjI,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,mCAAY,GAAnB,UAAoB,UAAU;QAC5B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,0CAA0C,GAAC,UAAU,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aAC1I,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,kCAAW,GAAlB,UAAmB,QAAc;QAC/B,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAEtC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,kCAAkC,EAAE,IAAI,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aAC9H,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,kCAAW,GAAlB,UAAmB,SAAe;QAChC,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QACvC,IAAM,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC;QAEpC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,mCAAmC,GAAC,QAAQ,EAAE,IAAI,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aACvI,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,kCAAW,GAAlB,UAAmB,QAAe;QAChC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,mCAAmC,GAAC,QAAQ,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aACpI,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAED,kCAAW,GAAX,UAAY,GAAa;QACvB,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC;IACpB,CAAC;IAED,4CAAqB,GAArB,UAAuB,KAAqB;QAC1C,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;QACtC,MAAM,CAAC,+CAAU,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;IAClD,CAAC;IACO,kCAAW,GAAnB,UAAqB,KAAU;QAC7B,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC9C,KAAK,CAAC,MAAM,CAAC,CAAC,CAAI,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY,CAAC,CAAC,CAAC,cAAc,CAAC;QACxE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,yBAAyB;IAChD,CAAC;IA1DU,YAAY;QADxB,gEAAU,EAAE;yCAQc,+DAAU;OAPxB,YAAY,CA2DxB;IAAD,mBAAC;CAAA;AA3DwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBkB;AACoB;AAI7B;AACD;AAGI;AAGrC,IAAM,WAAW,GAAG;IAClB,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;CAChD,CAAC;AAIF;IAOE,iCAAoB,IAAe;QAAf,SAAI,GAAJ,IAAI,CAAW;QAN3B,yBAAoB,GAAG,wBAAwB,CAAC;QAChD,WAAM,GAAG,wBAAwB,CAAC;QAC1C,+BAA0B,GAAiB,IAAI,oDAAO,EAAE,CAAC;QACzD,iBAAY,GAAW,QAAQ,CAAC;QAChC,gBAAW,GAAgB,IAAI,oDAAO,EAAE,CAAC;IAGzC,CAAC;IAEM,sDAAoB,GAA3B;QACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,6CAA6C,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aAClI,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,yDAAuB,GAA9B,UAA+B,oBAA2B;QACxD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,8CAA8C,GAAC,oBAAoB,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aACxJ,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,yDAAuB,GAA9B,UAA+B,UAAU;QACvC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,qDAAqD,GAAC,UAAU,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aACrJ,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,wDAAsB,GAA7B,UAA8B,mBAAoC;QAChE,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;QAEjD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,6CAA6C,EAAE,IAAI,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aACzI,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,wDAAsB,GAA7B,UAA8B,oBAAqC;QACjE,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC;QAClD,IAAM,oBAAoB,GAAG,oBAAoB,CAAC,oBAAoB,CAAC;QAEvE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,8CAA8C,GAAC,oBAAoB,EAAE,IAAI,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aAC9J,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,wDAAsB,GAA7B,UAA8B,oBAA2B;QACvD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,8CAA8C,GAAC,oBAAoB,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aAC3J,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAED,6CAAW,GAAX,UAAY,GAAa;QACvB,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC;IACpB,CAAC;IAED,uDAAqB,GAArB,UAAuB,KAAqB;QAC1C,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;QACtC,MAAM,CAAC,+CAAU,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;IAClD,CAAC;IACO,6CAAW,GAAnB,UAAqB,KAAU;QAC7B,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC9C,KAAK,CAAC,MAAM,CAAC,CAAC,CAAI,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY,CAAC,CAAC,CAAC,cAAc,CAAC;QACxE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,yBAAyB;IAChD,CAAC;IA1DU,uBAAuB;QADnC,gEAAU,EAAE;yCAQc,+DAAU;OAPxB,uBAAuB,CA2DnC;IAAD,8BAAC;CAAA;AA3DmC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBO;AACoB;AAI7B;AACD;AAGI;AAGrC,IAAM,WAAW,GAAG;IAClB,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;CAChD,CAAC;AAIF;IAOE,wBAAoB,IAAe;QAAf,SAAI,GAAJ,IAAI,CAAW;QAN3B,gBAAW,GAAG,eAAe,CAAC;QAC9B,WAAM,GAAG,eAAe,CAAC;QACjC,sBAAiB,GAAiB,IAAI,oDAAO,EAAE,CAAC;QAChD,iBAAY,GAAW,QAAQ,CAAC;QAChC,gBAAW,GAAgB,IAAI,oDAAO,EAAE,CAAC;IAGzC,CAAC;IAEM,oCAAW,GAAlB;QACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,oCAAoC,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aACzH,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,uCAAc,GAArB,UAAsB,UAAiB;QACrC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,qCAAqC,GAAC,UAAU,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aACrI,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,uCAAc,GAArB,UAAsB,UAAU;QAC9B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,4CAA4C,GAAC,UAAU,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aAC5I,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,sCAAa,GAApB,UAAqB,UAAkB;QACrC,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAExC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,oCAAoC,EAAE,IAAI,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aAChI,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,sCAAa,GAApB,UAAqB,WAAmB;QACtC,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QACzC,IAAM,UAAU,GAAG,WAAW,CAAC,UAAU,CAAC;QAE1C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,qCAAqC,GAAC,UAAU,EAAE,IAAI,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aAC3I,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,sCAAa,GAApB,UAAqB,UAAiB;QACpC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,qCAAqC,GAAC,UAAU,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aACxI,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAED,oCAAW,GAAX,UAAY,GAAa;QACvB,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC;IACpB,CAAC;IAED,8CAAqB,GAArB,UAAuB,KAAqB;QAC1C,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;QACtC,MAAM,CAAC,+CAAU,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;IAClD,CAAC;IACO,oCAAW,GAAnB,UAAqB,KAAU;QAC7B,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC9C,KAAK,CAAC,MAAM,CAAC,CAAC,CAAI,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY,CAAC,CAAC,CAAC,cAAc,CAAC;QACxE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,yBAAyB;IAChD,CAAC;IA1DU,cAAc;QAD1B,gEAAU,EAAE;yCAQc,+DAAU;OAPxB,cAAc,CA2D1B;IAAD,qBAAC;CAAA;AA3D0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBgB;AACoB;AAI7B;AACD;AAGI;AAGrC,IAAM,WAAW,GAAG;IAClB,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;CAChD,CAAC;AAIF;IAOE,4BAAoB,IAAe;QAAf,SAAI,GAAJ,IAAI,CAAW;QAN3B,oBAAe,GAAG,mBAAmB,CAAC;QACtC,WAAM,GAAG,mBAAmB,CAAC;QACrC,0BAAqB,GAAiB,IAAI,oDAAO,EAAE,CAAC;QACpD,iBAAY,GAAW,QAAQ,CAAC;QAChC,gBAAW,GAAgB,IAAI,oDAAO,EAAE,CAAC;IAGzC,CAAC;IAEM,4CAAe,GAAtB;QACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,wCAAwC,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aAC7H,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,+CAAkB,GAAzB,UAA0B,eAAsB;QAC9C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,yCAAyC,GAAC,eAAe,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aAC9I,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,+CAAkB,GAAzB,UAA0B,UAAU;QAClC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,gDAAgD,GAAC,UAAU,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aAChJ,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,8CAAiB,GAAxB,UAAyB,cAA0B;QACjD,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;QAE5C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,wCAAwC,EAAE,IAAI,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aACpI,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,8CAAiB,GAAxB,UAAyB,eAA2B;QAClD,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;QAC7C,IAAM,eAAe,GAAG,eAAe,CAAC,eAAe,CAAC;QAExD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,yCAAyC,GAAC,eAAe,EAAE,IAAI,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aACpJ,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAEM,8CAAiB,GAAxB,UAAyB,eAAsB;QAC7C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,yCAAyC,GAAC,eAAe,EAAE,EAAC,OAAO,EAAE,EAAC,cAAc,EAAE,iCAAiC,EAAC,EAAC,CAAC;aACjJ,GAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC;IACnB,CAAC;IAED,wCAAW,GAAX,UAAY,GAAa;QACvB,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC;IACpB,CAAC;IAED,kDAAqB,GAArB,UAAuB,KAAqB;QAC1C,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;QACtC,MAAM,CAAC,+CAAU,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;IAClD,CAAC;IACO,wCAAW,GAAnB,UAAqB,KAAU;QAC7B,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC9C,KAAK,CAAC,MAAM,CAAC,CAAC,CAAI,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY,CAAC,CAAC,CAAC,cAAc,CAAC;QACxE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,yBAAyB;IAChD,CAAC;IA1DU,kBAAkB;QAD9B,gEAAU,EAAE;yCAQc,+DAAU;OAPxB,kBAAkB,CA2D9B;IAAD,yBAAC;CAAA;AA3D8B","file":"common.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Client } from '../../data-model';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs';\nimport { Subscription } from 'rxjs/Subscription';\nimport 'rxjs/add/operator/catch';\nimport { map } from 'rxjs/operators';\nimport { RequestOptions } from '@angular/http';\nimport {Subject} from 'rxjs/Subject';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nconst httpOptions = {\n  headers: { 'Content-Type': 'application/json' }\n};\n\n\n@Injectable()\nexport class ClientService {\n  private clientsUrl = '/api/clients';\n  private putUrl = '/api/clients';\n  selectedClientId :Subject<any> = new Subject();\n  selectedMode :string = \"Create\";\n  refreshList:Subject<any> = new Subject();\n  states$: Observable<any>;\n\n  constructor(private http:HttpClient) {\n  }\n\n  public getClients(): Observable<any> {\n    return this.http.get('http://localhost:3000/api/clients', {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n  public getInvestors(): Observable<any> {\n    return this.http.get('http://localhost:3000/api/investors', {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n  public getInvestorsExpensesAndPercent(car_id:number): Observable<any> {\n    return this.http.get('http://localhost:3000/api/investors/investorsExpensesAndPercent/'+car_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n  public getAvailableBalance(investor_id:number): Observable<any> {\n    return this.http.get('http://localhost:3000/api/investors/'+investor_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public updateAvailableBalance(investor:any) {\n    const body = JSON.stringify(investor);\n    const investor_id = investor.investor_id;\n    return this.http.patch('http://localhost:3000/api/clients/'+investor_id, body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .subscribe(\n      res => {\n      console.log(\"Available Balance for the client is updated\", res);\n    },\n    err => {\n       console.log(\"Error \", err);\n    },\n    () => {\n      console.log(\"Completed\");\n    }\n  );\n  }\n\n  public updateTotalExpenses(investor:any) {\n    const body = JSON.stringify(investor);\n    const investor_id = investor.investor_id;\n    return this.http.patch('http://localhost:3000/api/clients/expenses/'+investor_id, body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .subscribe(\n      res => {\n      console.log(\"Total Expenses for the client is updated : \", res);\n    },\n    err => {\n       console.log(\"Error \", err);\n    },\n    () => {\n      console.log(\"Completed\");\n    }\n  );\n  }\n\n  public getClientById(client_id:number): Observable<any> {\n    return this.http.get('http://localhost:3000/api/clients/'+client_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public searchClients(searchTerm): Observable<any> {\n    return this.http.get('http://localhost:3000/api/clients/search/'+searchTerm, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public createClient(newClient:Client): Observable<any> {\n    const body = JSON.stringify(newClient);\n\n    return this.http.post('http://localhost:3000/api/clients', body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public updateClient(editClient:Client): Observable<any> {\n    const body = JSON.stringify(editClient);\n    const client_id = editClient.client_id;\n\n    return this.http.put('http://localhost:3000/api/clients/'+client_id, body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public deleteClient(client_id:number): Observable<any> {\n    return this.http.delete('http://localhost:3000/api/clients/'+client_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  extractData(res: Response) {\n    let body = res.json();\n    return body || {};\n  }\n\n  handleErrorObservable (error: Response | any) {\n    console.error(error.message || error);\n    return Observable.throw(error.message || error);\n  }\n\n  private handleError (error: any) {\n    let errMsg = (error.message) ? error.message :\n    error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    console.log(errMsg); // log to console instead\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Color } from '../../data-model';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs';\nimport 'rxjs/add/operator/catch';\nimport { map } from 'rxjs/operators';\nimport { RequestOptions } from '@angular/http';\nimport {Subject} from 'rxjs/Subject';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nconst httpOptions = {\n  headers: { 'Content-Type': 'application/json' }\n};\n\n\n@Injectable()\nexport class ColorService {\n  private colorsUrl = '/api/colors';\n  private putUrl = '/api/colors';\n  selectedColorId :Subject<any> = new Subject();\n  selectedMode :string = \"Create\";\n  refreshList:Subject<any> = new Subject();\n\n  constructor(private http:HttpClient) {\n  }\n\n  public getColors(): Observable<any> {\n    return this.http.get('http://localhost:3000/api/colors', {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public getColorById(color_id:number): Observable<any> {\n    return this.http.get('http://localhost:3000/api/colors/'+color_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public searchColors(searchTerm): Observable<any> {\n    return this.http.get('http://localhost:3000/api/colors/search/'+searchTerm, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public createColor(newColor:Color): Observable<any> {\n    const body = JSON.stringify(newColor);\n\n    return this.http.post('http://localhost:3000/api/colors', body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public updateColor(editColor:Color): Observable<any> {\n    const body = JSON.stringify(editColor);\n    const color_id = editColor.color_id;\n\n    return this.http.put(\"http://localhost:3000/api/colors/\"+color_id, body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public deleteColor(color_id:number): Observable<any> {\n    return this.http.delete('http://localhost:3000/api/colors/'+color_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  extractData(res: Response) {\n    let body = res.json();\n    return body || {};\n  }\n\n  handleErrorObservable (error: Response | any) {\n    console.error(error.message || error);\n    return Observable.throw(error.message || error);\n  }\n  private handleError (error: any) {\n    let errMsg = (error.message) ? error.message :\n    error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    console.log(errMsg); // log to console instead\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Expense } from '../../data-model';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs';\nimport 'rxjs/add/operator/catch';\nimport { map } from 'rxjs/operators';\nimport { RequestOptions } from '@angular/http';\nimport { Subject } from 'rxjs/Subject';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nconst httpOptions = {\n  headers: { 'Content-Type': 'application/json' }\n};\n\n\n@Injectable()\nexport class ExpenseService {\n  private expensesUrl = '/api/expenses';\n  private putUrl = '/api/expenses';\n  selectedExpenseId :Subject<any> = new Subject();\n  selectedMode :string = \"Create\";\n  refreshList:Subject<any> = new Subject();\n\n  constructor(private http:HttpClient) {\n  }\n\n  public getExpenses(): Observable<any> {\n    return this.http.get('http://localhost:3000/api/expenses', {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public getExpenseById(expense_id:number): Observable<any> {\n    return this.http.get('http://localhost:3000/api/expenses/'+expense_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public searchExpenses(searchTerm): Observable<any> {\n    return this.http.get('http://localhost:3000/api/expenses/search/'+searchTerm, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public createExpense(newExpense:Expense): Observable<any> {\n    const body = JSON.stringify(newExpense);\n\n    return this.http.post('http://localhost:3000/api/expenses', body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public updateExpense(editExpense:Expense): Observable<any> {\n    const body = JSON.stringify(editExpense);\n    const expense_id = editExpense.expense_id;\n\n    return this.http.put(\"http://localhost:3000/api/expenses/\"+expense_id, body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public deleteExpense(expense_id:number): Observable<any> {\n    return this.http.delete('http://localhost:3000/api/expenses/'+expense_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  extractData(res: Response) {\n    let body = res.json();\n    return body || {};\n  }\n\n  handleErrorObservable (error: Response | any) {\n    console.error(error.message || error);\n    return Observable.throw(error.message || error);\n  }\n  private handleError (error: any) {\n    let errMsg = (error.message) ? error.message :\n    error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    console.log(errMsg); // log to console instead\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { FuelType } from '../../data-model';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs';\nimport 'rxjs/add/operator/catch';\nimport { map } from 'rxjs/operators';\nimport { RequestOptions } from '@angular/http';\nimport {Subject} from 'rxjs/Subject';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nconst httpOptions = {\n  headers: { 'Content-Type': 'application/json' }\n};\n\n\n@Injectable()\nexport class FuelTypeService {\n  private fuelTypesUrl = '/api/fuelTypes';\n  private putUrl = '/api/fuelTypes';\n  selectedFuelTypeId :Subject<any> = new Subject();\n  selectedMode :string = \"Create\";\n  refreshList:Subject<any> = new Subject();\n\n  constructor(private http:HttpClient) {\n  }\n\n  public getFuelTypes(): Observable<any> {\n    return this.http.get('http://localhost:3000/api/fuelTypes', {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public getFuelTypeById(fuel_type_id:number): Observable<any> {\n    return this.http.get('http://localhost:3000/api/fuelTypes/'+fuel_type_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public searchFuelTypes(searchTerm): Observable<any> {\n    return this.http.get('http://localhost:3000/api/fuelTypes/search/'+searchTerm, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public createFuelType(newFuelType:FuelType): Observable<any> {\n    const body = JSON.stringify(newFuelType);\n\n    return this.http.post('http://localhost:3000/api/fuelTypes', body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public updateFuelType(editFuelType:FuelType): Observable<any> {\n    const body = JSON.stringify(editFuelType);\n    const fuel_type_id = editFuelType.fuel_type_id;\n\n    return this.http.put(\"http://localhost:3000/api/fuelTypes/\"+fuel_type_id, body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public deleteFuelType(fuel_type_id:number): Observable<any> {\n    return this.http.delete('http://localhost:3000/api/fuelTypes/'+fuel_type_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  extractData(res: Response) {\n    let body = res.json();\n    return body || {};\n  }\n\n  handleErrorObservable (error: Response | any) {\n    console.error(error.message || error);\n    return Observable.throw(error.message || error);\n  }\n  private handleError (error: any) {\n    let errMsg = (error.message) ? error.message :\n    error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    console.log(errMsg); // log to console instead\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { InsuranceType } from '../../data-model';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs';\nimport 'rxjs/add/operator/catch';\nimport { map } from 'rxjs/operators';\nimport { RequestOptions } from '@angular/http';\nimport {Subject} from 'rxjs/Subject';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nconst httpOptions = {\n  headers: { 'Content-Type': 'application/json' }\n};\n\n\n@Injectable()\nexport class InsuranceTypeService {\n  private insuranceTypesUrl = '/api/insuranceTypes';\n  private putUrl = '/api/insuranceTypes';\n  selectedInsuranceTypeId :Subject<any> = new Subject();\n  selectedMode :string = \"Create\";\n  refreshList:Subject<any> = new Subject();\n\n  constructor(private http:HttpClient) {\n  }\n\n  public getInsuranceTypes(): Observable<any> {\n    return this.http.get('http://localhost:3000/api/insuranceTypes', {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public getInsuranceTypeById(insurance_type_id:number): Observable<any> {\n    return this.http.get('http://localhost:3000/api/insuranceTypes/'+insurance_type_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public searchInsuranceTypes(searchTerm): Observable<any> {\n    return this.http.get('http://localhost:3000/api/insuranceTypes/search/'+searchTerm, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public createInsuranceType(newInsuranceType:InsuranceType): Observable<any> {\n    const body = JSON.stringify(newInsuranceType);\n\n    return this.http.post('http://localhost:3000/api/insuranceTypes', body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public updateInsuranceType(editInsuranceType:InsuranceType): Observable<any> {\n    const body = JSON.stringify(editInsuranceType);\n    const insurance_type_id = editInsuranceType.insurance_type_id;\n\n    return this.http.put(\"http://localhost:3000/api/insuranceTypes/\"+insurance_type_id, body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public deleteInsuranceType(insurance_type_id:number): Observable<any> {\n    return this.http.delete('http://localhost:3000/api/insuranceTypes/'+insurance_type_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  extractData(res: Response) {\n    let body = res.json();\n    return body || {};\n  }\n\n  handleErrorObservable (error: Response | any) {\n    console.error(error.message || error);\n    return Observable.throw(error.message || error);\n  }\n  private handleError (error: any) {\n    let errMsg = (error.message) ? error.message :\n    error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    console.log(errMsg); // log to console instead\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Insurance } from '../../data-model';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs';\nimport 'rxjs/add/operator/catch';\nimport { map } from 'rxjs/operators';\nimport { RequestOptions } from '@angular/http';\nimport {Subject} from 'rxjs/Subject';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nconst httpOptions = {\n  headers: { 'Content-Type': 'application/json' }\n};\n\n\n@Injectable()\nexport class InsuranceService {\n  private insurancesUrl = '/api/insurances';\n  private putUrl = '/api/insurances';\n  selectedInsuranceId :Subject<any> = new Subject();\n  selectedMode :string = \"Create\";\n  refreshList:Subject<any> = new Subject();\n\n  constructor(private http:HttpClient) {\n  }\n\n  public getInsurances(): Observable<any> {\n    return this.http.get('http://localhost:3000/api/insurances', {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public getInsuranceById(insurance_id:number): Observable<any> {\n    return this.http.get('http://localhost:3000/api/insurances/'+insurance_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public searchInsurances(searchTerm): Observable<any> {\n    return this.http.get('http://localhost:3000/api/insurances/search/'+searchTerm, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public createInsurance(newInsurance:Insurance): Observable<any> {\n    const body = JSON.stringify(newInsurance);\n\n    return this.http.post('http://localhost:3000/api/insurances', body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public updateInsurance(editInsurance:Insurance): Observable<any> {\n    const body = JSON.stringify(editInsurance);\n    const insurance_id = editInsurance.insurance_id;\n\n    return this.http.put(\"http://localhost:3000/api/insurances/\"+insurance_id, body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public deleteInsurance(insurance_id:number): Observable<any> {\n    return this.http.delete('http://localhost:3000/api/insurances/'+insurance_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  extractData(res: Response) {\n    let body = res.json();\n    return body || {};\n  }\n\n  handleErrorObservable (error: Response | any) {\n    console.error(error.message || error);\n    return Observable.throw(error.message || error);\n  }\n  private handleError (error: any) {\n    let errMsg = (error.message) ? error.message :\n    error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    console.log(errMsg); // log to console instead\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Make } from '../../data-model';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs';\nimport 'rxjs/add/operator/catch';\nimport { map } from 'rxjs/operators';\nimport { RequestOptions } from '@angular/http';\nimport {Subject} from 'rxjs/Subject';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nconst httpOptions = {\n  headers: { 'Content-Type': 'application/json' }\n};\n\n\n@Injectable()\nexport class MakeService {\n  private makesUrl = '/api/makes';\n  private putUrl = '/api/makes';\n  selectedMakeId :Subject<any> = new Subject();\n  selectedMode :string = \"Create\";\n  refreshList:Subject<any> = new Subject();\n\n  constructor(private http:HttpClient) {\n  }\n\n  public getMakes(): Observable<any> {\n    return this.http.get('http://localhost:3000/api/makes', {headers: {'Content-Type': 'application/json; charset=utf-8'}});\n    //.map(res => res);\n  }\n\n  public getMakeById(make_id:number): Observable<any> {\n    return this.http.get('http://localhost:3000/api/makes/'+make_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public searchMakes(searchTerm): Observable<any> {\n    return this.http.get('http://localhost:3000/api/makes/search/'+searchTerm, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public createMake(newMake:Make): Observable<any> {\n    const body = JSON.stringify(newMake);\n\n    return this.http.post('http://localhost:3000/api/makes', body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public updateMake(editMake:Make): Observable<any> {\n    const body = JSON.stringify(editMake);\n    const make_id = editMake.make_id;\n\n    return this.http.put(\"http://localhost:3000/api/makes/\"+make_id, body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public deleteMake(make_id:number): Observable<any> {\n    return this.http.delete('http://localhost:3000/api/makes/'+make_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  extractData(res: Response) {\n    let body = res.json();\n    return body || {};\n  }\n\n  handleErrorObservable (error: Response | any) {\n    console.error(error.message || error);\n    return Observable.throw(error.message || error);\n  }\n  private handleError (error: any) {\n    let errMsg = (error.message) ? error.message :\n    error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    console.log(errMsg); // log to console instead\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Model } from '../../data-model';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs';\nimport 'rxjs/add/operator/catch';\nimport { map } from 'rxjs/operators';\nimport { RequestOptions } from '@angular/http';\nimport {Subject} from 'rxjs/Subject';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nconst httpOptions = {\n  headers: { 'Content-Type': 'application/json' }\n};\n\n\n@Injectable()\nexport class ModelService {\n  private modelsUrl = '/api/models';\n  private putUrl = '/api/models';\n  selectedModelId :Subject<any> = new Subject();\n  selectedMode :string = \"Create\";\n  refreshList:Subject<any> = new Subject();\n\n  constructor(private http:HttpClient) {\n  }\n\n  public getModels(): Observable<any> {\n    return this.http.get('http://localhost:3000/api/models', {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public getModelById(model_id:number): Observable<any> {\n    return this.http.get('http://localhost:3000/api/models/'+model_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public searchModels(searchTerm): Observable<any> {\n    return this.http.get('http://localhost:3000/api/models/search/'+searchTerm, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public createModel(newModel:Model): Observable<any> {\n    const body = JSON.stringify(newModel);\n\n    return this.http.post('http://localhost:3000/api/models', body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public updateModel(editModel:Model): Observable<any> {\n    const body = JSON.stringify(editModel);\n    const model_id = editModel.model_id;\n\n    return this.http.put(\"http://localhost:3000/api/models/\"+model_id, body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public deleteModel(model_id:number): Observable<any> {\n    return this.http.delete('http://localhost:3000/api/models/'+model_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  extractData(res: Response) {\n    let body = res.json();\n    return body || {};\n  }\n\n  handleErrorObservable (error: Response | any) {\n    console.error(error.message || error);\n    return Observable.throw(error.message || error);\n  }\n  private handleError (error: any) {\n    let errMsg = (error.message) ? error.message :\n    error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    console.log(errMsg); // log to console instead\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { TransmissionType } from '../../data-model';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs';\nimport 'rxjs/add/operator/catch';\nimport { map } from 'rxjs/operators';\nimport { RequestOptions } from '@angular/http';\nimport {Subject} from 'rxjs/Subject';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nconst httpOptions = {\n  headers: { 'Content-Type': 'application/json' }\n};\n\n\n@Injectable()\nexport class TransmissionTypeService {\n  private transmissionTypesUrl = '/api/transmissionTypes';\n  private putUrl = '/api/transmissionTypes';\n  selectedTransmissionTypeId :Subject<any> = new Subject();\n  selectedMode :string = \"Create\";\n  refreshList:Subject<any> = new Subject();\n\n  constructor(private http:HttpClient) {\n  }\n\n  public getTransmissionTypes(): Observable<any> {\n    return this.http.get('http://localhost:3000/api/transmissionTypes', {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public getTransmissionTypeById(transmission_type_id:number): Observable<any> {\n    return this.http.get('http://localhost:3000/api/transmissionTypes/'+transmission_type_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public searchTransmissionTypes(searchTerm): Observable<any> {\n    return this.http.get('http://localhost:3000/api/transmissionTypes/search/'+searchTerm, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public createTransmissionType(newTransmissionType:TransmissionType): Observable<any> {\n    const body = JSON.stringify(newTransmissionType);\n\n    return this.http.post('http://localhost:3000/api/transmissionTypes', body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public updateTransmissionType(editTransmissionType:TransmissionType): Observable<any> {\n    const body = JSON.stringify(editTransmissionType);\n    const transmission_type_id = editTransmissionType.transmission_type_id;\n\n    return this.http.put(\"http://localhost:3000/api/transmissionTypes/\"+transmission_type_id, body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public deleteTransmissionType(transmission_type_id:number): Observable<any> {\n    return this.http.delete('http://localhost:3000/api/transmissionTypes/'+transmission_type_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  extractData(res: Response) {\n    let body = res.json();\n    return body || {};\n  }\n\n  handleErrorObservable (error: Response | any) {\n    console.error(error.message || error);\n    return Observable.throw(error.message || error);\n  }\n  private handleError (error: any) {\n    let errMsg = (error.message) ? error.message :\n    error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    console.log(errMsg); // log to console instead\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Variant } from '../../data-model';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs';\nimport 'rxjs/add/operator/catch';\nimport { map } from 'rxjs/operators';\nimport { RequestOptions } from '@angular/http';\nimport {Subject} from 'rxjs/Subject';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nconst httpOptions = {\n  headers: { 'Content-Type': 'application/json' }\n};\n\n\n@Injectable()\nexport class VariantService {\n  private variantsUrl = '/api/variants';\n  private putUrl = '/api/variants';\n  selectedVariantId :Subject<any> = new Subject();\n  selectedMode :string = \"Create\";\n  refreshList:Subject<any> = new Subject();\n\n  constructor(private http:HttpClient) {\n  }\n\n  public getVariants(): Observable<any> {\n    return this.http.get('http://localhost:3000/api/variants', {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public getVariantById(variant_id:number): Observable<any> {\n    return this.http.get('http://localhost:3000/api/variants/'+variant_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public searchVariants(searchTerm): Observable<any> {\n    return this.http.get('http://localhost:3000/api/variants/search/'+searchTerm, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public createVariant(newVariant:Variant): Observable<any> {\n    const body = JSON.stringify(newVariant);\n\n    return this.http.post('http://localhost:3000/api/variants', body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public updateVariant(editVariant:Variant): Observable<any> {\n    const body = JSON.stringify(editVariant);\n    const variant_id = editVariant.variant_id;\n\n    return this.http.put(\"http://localhost:3000/api/variants/\"+variant_id, body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public deleteVariant(variant_id:number): Observable<any> {\n    return this.http.delete('http://localhost:3000/api/variants/'+variant_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  extractData(res: Response) {\n    let body = res.json();\n    return body || {};\n  }\n\n  handleErrorObservable (error: Response | any) {\n    console.error(error.message || error);\n    return Observable.throw(error.message || error);\n  }\n  private handleError (error: any) {\n    let errMsg = (error.message) ? error.message :\n    error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    console.log(errMsg); // log to console instead\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { VehicleType } from '../../data-model';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs';\nimport 'rxjs/add/operator/catch';\nimport { map } from 'rxjs/operators';\nimport { RequestOptions } from '@angular/http';\nimport {Subject} from 'rxjs/Subject';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nconst httpOptions = {\n  headers: { 'Content-Type': 'application/json' }\n};\n\n\n@Injectable()\nexport class VehicleTypeService {\n  private vehicleTypesUrl = '/api/vehicleTypes';\n  private putUrl = '/api/vehicleTypes';\n  selectedVehicleTypeId :Subject<any> = new Subject();\n  selectedMode :string = \"Create\";\n  refreshList:Subject<any> = new Subject();\n\n  constructor(private http:HttpClient) {\n  }\n\n  public getVehicleTypes(): Observable<any> {\n    return this.http.get('http://localhost:3000/api/vehicleTypes', {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public getVehicleTypeById(vehicle_type_id:number): Observable<any> {\n    return this.http.get('http://localhost:3000/api/vehicleTypes/'+vehicle_type_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public searchVehicleTypes(searchTerm): Observable<any> {\n    return this.http.get('http://localhost:3000/api/vehicleTypes/search/'+searchTerm, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public createVehicleType(newVehicleType:VehicleType): Observable<any> {\n    const body = JSON.stringify(newVehicleType);\n\n    return this.http.post('http://localhost:3000/api/vehicleTypes', body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public updateVehicleType(editVehicleType:VehicleType): Observable<any> {\n    const body = JSON.stringify(editVehicleType);\n    const vehicle_type_id = editVehicleType.vehicle_type_id;\n\n    return this.http.put(\"http://localhost:3000/api/vehicleTypes/\"+vehicle_type_id, body, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  public deleteVehicleType(vehicle_type_id:number): Observable<any> {\n    return this.http.delete('http://localhost:3000/api/vehicleTypes/'+vehicle_type_id, {headers: {'Content-Type': 'application/json; charset=utf-8'}})\n    .map(res => res);\n  }\n\n  extractData(res: Response) {\n    let body = res.json();\n    return body || {};\n  }\n\n  handleErrorObservable (error: Response | any) {\n    console.error(error.message || error);\n    return Observable.throw(error.message || error);\n  }\n  private handleError (error: any) {\n    let errMsg = (error.message) ? error.message :\n    error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    console.log(errMsg); // log to console instead\n  }\n}\n"],"sourceRoot":""}