{"version":3,"sources":["webpack:///./src/app/components/transmission-type/transmission-type-form/transmission-type-form.component.html","webpack:///./src/app/components/transmission-type/transmission-type-form/transmission-type-form.component.scss","webpack:///./src/app/components/transmission-type/transmission-type-form/transmission-type-form.component.ts","webpack:///./src/app/components/transmission-type/transmission-type-list/transmission-type-list.component.html","webpack:///./src/app/components/transmission-type/transmission-type-list/transmission-type-list.component.scss","webpack:///./src/app/components/transmission-type/transmission-type-list/transmission-type-list.component.ts","webpack:///./src/app/components/transmission-type/transmission-type-routing.module.ts","webpack:///./src/app/components/transmission-type/transmission-type.component.html","webpack:///./src/app/components/transmission-type/transmission-type.component.scss","webpack:///./src/app/components/transmission-type/transmission-type.component.ts"],"names":[],"mappings":"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","file":"components-transmission-type-transmission-type-routing-module.js","sourcesContent":["module.exports = \"<section class=\\\"container-fluid section\\\">\\n  <div class=\\\"col-12 grey lighten-4\\\">\\n    <header class=\\\"header row\\\">\\n      <div class=\\\"col-12\\\">\\n        <app-title [title]=title></app-title>\\n      </div>\\n    </header>\\n\\n    <div class=\\\"col-12\\\">\\n      <form [formGroup]=\\\"transmissionTypeForm\\\" (ngSubmit)=\\\"onSubmit()\\\" >\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"inputTransmissionTypeName\\\" class=\\\"col-sm-2 col-form-label\\\">Name</label>\\n          <div>\\n            <div class=\\\"md-form mt-0\\\">\\n              <input type=\\\"text\\\" class=\\\"form-control capitalize\\\" id=\\\"inputTransmissionTypeName\\\" formControlName=\\\"name\\\">\\n              <!-- <p style=\\\"color:red\\\" *ngIf=\\\"transmissionTypeForm.controls.name.touched && transmissionTypeForm.controls.name.errors.required\\\">Required</p> -->\\n              <app-control-messages [control]=\\\"transmissionTypeForm.controls.name\\\"></app-control-messages>\\n            </div>\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"text-right\\\">\\n            <!--  [disabled]=\\\"transmissionTypeForm.invalid\\\"-->\\n            <button type=\\\"submit\\\" class=\\\"btn btn-primary btn-custom btn-md\\\" >\\n              <i class=\\\"fa fa-save\\\"></i>\\n            </button>\\n            <app-simple-modal [module]=\\\"module\\\" [mode]=\\\"mode\\\" [name]=\\\"transmissionTypeForm.controls.name.value\\\" (isDelete)=\\\"deleteTransmissionType($event)\\\"></app-simple-modal>\\n\\n          </div>\\n        </div>\\n      </form>\\n    </div>\\n  </div>\\n</section>\\n\"","module.exports = \"\"","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router,ActivatedRoute } from '@angular/router';\n\nimport { TransmissionType } from 'app/data-model';\nimport { TransmissionTypeService } from 'app/services/transmission-type/transmission-type.service';\n\n@Component({\n  selector: 'app-transmissionType-form',\n  templateUrl: './transmission-type-form.component.html',\n  styleUrls: ['./transmission-type-form.component.scss']\n})\nexport class TransmissionTypeFormComponent implements OnInit {\n  title : string = \"Create Transmission Type\";\n  module :string=\"trasnmission type\";\n  mode :string=\"discard\";\n  message:string=\"\";\n  transmissionTypeForm: FormGroup;\n  selectedTransmissionType_Id: any;\n  submitted = false;\n\n  constructor(private fb: FormBuilder, private transmissionTypeService:TransmissionTypeService, private router:Router, private route:ActivatedRoute) {\n  }\n\n\n  createForm() {\n    this.transmissionTypeForm = this.fb.group({\n      transmission_type_id: [''],\n      name: ['', [Validators.required,Validators.maxLength(50)]],\n    });\n  }\n\n  onSubmit(){\n    this.submitted = true;\n    if (this.transmissionTypeForm.valid) {\n      if(this.transmissionTypeService.selectedMode == 'Create'){\n        this.createTransmissionType();\n      }\n      else if (this.transmissionTypeService.selectedMode == 'Edit'){\n        this.updateTransmissionType();\n      }\n    }\n  }\n\n  getTransmissionTypeById(transmissionType_id:number){\n    this.transmissionTypeService.getTransmissionTypeById(transmissionType_id)\n    .subscribe(\n        res => {\n        this.transmissionTypeForm.patchValue(res[0]);\n        },\n        err => {\n          console.log(err);\n        }\n      );\n  }\n\n  createTransmissionType(){\n    this.transmissionTypeService.createTransmissionType(this.transmissionTypeForm.value)\n    .subscribe(\n      res => {\n        this.transmissionTypeService.refreshList.next(true);\n        this.transmissionTypeForm.reset();\n      },\n      err => {\n        console.log(err);\n      }\n    );\n  }\n\n  updateTransmissionType(){\n    this.transmissionTypeService.updateTransmissionType(this.transmissionTypeForm.value)\n    .subscribe(\n      res => {\n          this.transmissionTypeService.refreshList.next(true);\n      },\n      err => {\n        console.log(err);\n      }\n    );\n  }\n\n  deleteTransmissionType(event){\n    if(this.selectedTransmissionType_Id)\n    {\n      this.transmissionTypeService.deleteTransmissionType(this.selectedTransmissionType_Id).subscribe(\n        res => {\n          this.transmissionTypeService.refreshList.next(true);\n          this.router.navigate(['/transmissionType/add']);\n        },\n        err => {\n          console.log(err);\n        }\n      );\n    }\n    else{\n      this.transmissionTypeForm.reset();\n    }\n  }\n\n  ngOnInit() {\n    this.createForm();\n\n    this.transmissionTypeService.selectedTransmissionTypeId\n    .subscribe(\n      res => {\n        this.selectedTransmissionType_Id = res;\n        if(this.transmissionTypeService.selectedMode == \"Edit\"){\n          this.title = \"Edit Transmission Type\";\n          this.mode = \"delete\";\n          this.getTransmissionTypeById(res);\n        }\n      },\n      err => {\n\n      }\n    );\n  }\n\n}\n","module.exports = \"<section class=\\\"container-fluid section-list\\\">\\n  <div>\\n    <app-search (searchTermValueChanged)=\\\"searchTransmissionTypes($event)\\\" (isCreate)=\\\"createTransmissionType('Create')\\\"></app-search>\\n  </div>\\n  <div>\\n    <table class=\\\"table\\\">\\n      <thead class=\\\"#f5f5f5 grey lighten-4\\\">\\n        <tr>\\n          <th>#</th>\\n          <th>Name</th>\\n          <th>Edit</th>\\n        </tr>\\n      </thead>\\n      <tbody>\\n        <tr *ngFor='let transmissionType of results$ | async' [ngClass]=\\\"{'is-active': selectedTransmissionTypeId == transmissionType.transmission_type_id}\\\">\\n          <th scope=\\\"row\\\">{{transmissionType.transmission_type_id}}</th>\\n          <td>{{transmissionType.name}}</td>\\n          <td class=\\\"pointer\\\" (click)=\\\"selectTransmissionType(transmissionType.transmission_type_id, 'Edit')\\\">\\n              <i class=\\\"fa fa-pencil\\\"></i>\\n          </td>\\n        </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n</section>\\n\"","module.exports = \"\"","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Router,ActivatedRoute } from '@angular/router';\n\nimport { TransmissionType } from 'app/data-model';\nimport { TransmissionTypeService } from 'app/services/transmission-type/transmission-type.service';\n\n@Component({\n  selector: 'app-transmissionType-list',\n  templateUrl: './transmission-type-list.component.html',\n  styleUrls: ['./transmission-type-list.component.scss']\n})\nexport class TransmissionTypeListComponent implements OnInit {\n  @Input()\n  results$: Observable<TransmissionType>;\n\n  @Output()\n  searchTerm = new EventEmitter();\n\n  selectedTransmissionTypeId:number;\n\n  constructor(private transmissionTypeService:TransmissionTypeService, private router:Router, private route:ActivatedRoute) { }\n\n  ngOnInit() {\n    this.router.navigate(['/transmissionType/add']);\n  }\n\n  searchTransmissionTypes(search: string){\n    this.searchTerm.emit(search);\n  }\n\n  //On Click of the Add Button\n  createTransmissionType(mode:any){\n    this.transmissionTypeService.selectedMode = mode;\n    this.router.navigate(['/transmissionType/add']);\n  }\n\n  //On Click of the Edit Button\n  selectTransmissionType(transmissionType_id:number, mode:any){\n    this.selectedTransmissionTypeId=transmissionType_id;\n    this.transmissionTypeService.selectedMode = mode;\n    this.router.navigate(['/transmissionType/edit']);\n    setTimeout(() => {\n      this.transmissionTypeService.selectedTransmissionTypeId.next(transmissionType_id);\n    }, 100);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { TransmissionTypeComponent} from './transmission-type.component';\nimport { TransmissionTypeListComponent} from './transmission-type-list/transmission-type-list.component';\nimport { TransmissionTypeFormComponent} from './transmission-type-form/transmission-type-form.component';\n\nconst transmissionTypeRoutes: Routes = [\n  {\n    path: 'transmissionType',\n    component: TransmissionTypeComponent,\n    children: [\n        {path: 'list',component: TransmissionTypeListComponent},\n        {path: 'add', component: TransmissionTypeFormComponent},\n        {path: 'edit', component: TransmissionTypeFormComponent}\n      ]\n}];\n\n@NgModule({\n  imports: [RouterModule.forChild(transmissionTypeRoutes)],\n  exports: [RouterModule]\n})\n export class TransmissionTypeRoutingModule { }\n","module.exports = \"<header class=\\\"header\\\">\\n  <div class=\\\"col-12\\\">\\n    <app-title [title]=title></app-title>\\n  </div>\\n</header>\\n\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-4\\\">\\n  <app-transmissionType-list (searchTerm)=\\\"searchTransmissionTypes($event)\\\" [results$]=\\\"transmissionTypes$\\\"></app-transmissionType-list>\\n  </div>\\n  <div class=\\\"col-8\\\">\\n    <router-outlet></router-outlet>\\n  </div>\\n</div>\\n\"","module.exports = \"\"","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Subscription } from 'rxjs/Subscription';\nimport { Observable } from 'rxjs/Observable';\nimport { EmptyObservable } from 'rxjs/observable/EmptyObservable';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { TransmissionType } from 'app/data-model';\nimport { TransmissionTypeService } from 'app/services/transmission-type/transmission-type.service';\n\n@Component({\n  selector: 'app-make',\n  templateUrl: './transmission-type.component.html',\n  styleUrls: ['./transmission-type.component.scss']\n})\nexport class TransmissionTypeComponent implements OnInit {\n  title : string = \"Transmission Type\";\n  selectedTransmissionType : TransmissionType;\n\n  transmissionTypes$: Observable<TransmissionType>;\n\n  constructor(private fb: FormBuilder, private transmissionTypeService:TransmissionTypeService, private router: Router, private route: ActivatedRoute) {\n\n  }\n\n  ngOnInit() {\n    this.getTransmissionTypes();\n    this.transmissionTypeService.refreshList.subscribe(\n      res=>{\n          this.getTransmissionTypes();\n      },\n      err => {\n        console.log(err);\n      }\n    );\n  }\n\n  getTransmissionTypes()  {\n    this.transmissionTypes$ = this.transmissionTypeService.getTransmissionTypes();\n  }\n\n  searchTransmissionTypes(searchTerm){\n    if(searchTerm){\n      this.transmissionTypes$ = this.transmissionTypeService.searchTransmissionTypes(searchTerm);\n    }\n    else{\n      this.transmissionTypes$ = new EmptyObservable();\n    }\n  }\n\n}\n"],"sourceRoot":""}