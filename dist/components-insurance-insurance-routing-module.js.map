{"version":3,"sources":["webpack:///./src/app/components/insurance/insurance-form/insurance-form.component.html","webpack:///./src/app/components/insurance/insurance-form/insurance-form.component.scss","webpack:///./src/app/components/insurance/insurance-form/insurance-form.component.ts","webpack:///./src/app/components/insurance/insurance-list/insurance-list.component.html","webpack:///./src/app/components/insurance/insurance-list/insurance-list.component.scss","webpack:///./src/app/components/insurance/insurance-list/insurance-list.component.ts","webpack:///./src/app/components/insurance/insurance-routing.module.ts","webpack:///./src/app/components/insurance/insurance.component.html","webpack:///./src/app/components/insurance/insurance.component.scss","webpack:///./src/app/components/insurance/insurance.component.ts"],"names":[],"mappings":"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","file":"components-insurance-insurance-routing-module.js","sourcesContent":["module.exports = \"<section class=\\\"container-fluid section\\\">\\n  <div class=\\\"col-12 grey lighten-4\\\">\\n    <header class=\\\"header row\\\">\\n      <div class=\\\"col-12\\\">\\n        <app-title [title]=title></app-title>\\n      </div>\\n    </header>\\n\\n    <div class=\\\"col-12\\\">\\n      <form [formGroup]=\\\"insuranceForm\\\" (ngSubmit)=\\\"onSubmit()\\\" >\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"inputInsuranceName\\\" class=\\\"col-sm-2 col-form-label\\\">Name</label>\\n          <div>\\n            <div class=\\\"md-form mt-0\\\">\\n              <input type=\\\"text\\\" class=\\\"form-control capitalize\\\" id=\\\"inputInsuranceName\\\" formControlName=\\\"name\\\">\\n              <!-- <p style=\\\"color:red\\\" *ngIf=\\\"insuranceForm.controls.name.touched && insuranceForm.controls.name.errors.required\\\">Required</p> -->\\n              <app-control-messages [control]=\\\"insuranceForm.controls.name\\\"></app-control-messages>\\n            </div>\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"text-right\\\">\\n            <!--  [disabled]=\\\"insuranceForm.invalid\\\"-->\\n            <button type=\\\"submit\\\" class=\\\"btn btn-primary btn-custom btn-md\\\" >\\n              <i class=\\\"fa fa-save\\\"></i>\\n            </button>\\n            <app-simple-modal [module]=\\\"module\\\" [mode]=\\\"mode\\\" [name]=\\\"insuranceForm.controls.name.value\\\" (isDelete)=\\\"deleteInsurance($event)\\\"></app-simple-modal>\\n\\n          </div>\\n        </div>\\n      </form>\\n    </div>\\n  </div>\\n</section>\\n\"","module.exports = \"\"","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router,ActivatedRoute } from '@angular/router';\n\nimport { Insurance } from 'app/data-model';\nimport { InsuranceService } from 'app/services/insurance/insurance.service';\n\n@Component({\n  selector: 'app-insurance-form',\n  templateUrl: './insurance-form.component.html',\n  styleUrls: ['./insurance-form.component.scss']\n})\nexport class InsuranceFormComponent implements OnInit {\n  title : string = \"Create Insurance\";\n  module :string=\"insurance\";\n  mode :string=\"discard\";\n  message:string=\"\";\n  insuranceForm: FormGroup;\n  selectedInsurance_Id: any;\n  submitted = false;\n\n  constructor(private fb: FormBuilder, private insuranceService:InsuranceService, private router:Router, private route:ActivatedRoute) {\n  }\n\n\n  createForm() {\n    this.insuranceForm = this.fb.group({\n      insurance_id: [''],\n      name: ['', [Validators.required,Validators.maxLength(50)]],\n    });\n  }\n\n  onSubmit(){\n    this.submitted = true;\n    if (this.insuranceForm.valid) {\n      if(this.insuranceService.selectedMode == 'Create'){\n        this.createInsurance();\n      }\n      else if (this.insuranceService.selectedMode == 'Edit'){\n        this.updateInsurance();\n      }\n    }\n  }\n\n  getInsuranceById(insurance_id:number){\n    this.insuranceService.getInsuranceById(insurance_id)\n    .subscribe(\n        res => {\n        this.insuranceForm.patchValue(res[0]);\n        },\n        err => {\n          console.log(err);\n        }\n      );\n  }\n\n  createInsurance(){\n    this.insuranceService.createInsurance(this.insuranceForm.value)\n    .subscribe(\n      res => {\n        this.insuranceService.refreshList.next(true);\n        this.insuranceForm.reset();\n      },\n      err => {\n        console.log(err);\n      }\n    );\n  }\n\n  updateInsurance(){\n    this.insuranceService.updateInsurance(this.insuranceForm.value)\n    .subscribe(\n      res => {\n          this.insuranceService.refreshList.next(true);\n      },\n      err => {\n        console.log(err);\n      }\n    );\n  }\n\n  deleteInsurance(event){\n    if(this.selectedInsurance_Id)\n    {\n      this.insuranceService.deleteInsurance(this.selectedInsurance_Id).subscribe(\n        res => {\n          this.insuranceService.refreshList.next(true);\n          this.router.navigate(['/insurance/add']);\n        },\n        err => {\n          console.log(err);\n        }\n      );\n    }\n    else{\n      this.insuranceForm.reset();\n    }\n  }\n\n  ngOnInit() {\n    this.createForm();\n\n    this.insuranceService.selectedInsuranceId\n    .subscribe(\n      res => {\n        this.selectedInsurance_Id = res;\n        if(this.insuranceService.selectedMode == \"Edit\"){\n          this.title = \"Edit Insurance\";\n          this.mode = \"delete\";\n          this.getInsuranceById(res);\n        }\n      },\n      err => {\n\n      }\n    );\n  }\n\n}\n","module.exports = \"<section class=\\\"container-fluid section-list\\\">\\n  <div>\\n    <app-search (searchTermValueChanged)=\\\"searchInsurances($event)\\\" (isCreate)=\\\"createInsurance('Create')\\\"></app-search>\\n  </div>\\n  <div>\\n    <table class=\\\"table\\\">\\n      <thead class=\\\"#f5f5f5 grey lighten-4\\\">\\n        <tr>\\n          <th>#</th>\\n          <th>Name</th>\\n          <th>Edit</th>\\n        </tr>\\n      </thead>\\n      <tbody>\\n        <tr *ngFor='let insurance of results$ | async'>\\n          <th scope=\\\"row\\\">{{insurance.insurance_id}}</th>\\n          <td>{{insurance.name}}</td>\\n          <td class=\\\"pointer\\\" (click)=\\\"selectInsurance(insurance.insurance_id, 'Edit')\\\">\\n              <i class=\\\"fa fa-pencil\\\"></i>\\n          </td>\\n        </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n</section>\\n\"","module.exports = \"\"","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Router,ActivatedRoute } from '@angular/router';\n\nimport { Insurance } from 'app/data-model';\nimport { InsuranceService } from 'app/services/insurance/insurance.service';\n\n@Component({\n  selector: 'app-insurance-list',\n  templateUrl: './insurance-list.component.html',\n  styleUrls: ['./insurance-list.component.scss']\n})\nexport class InsuranceListComponent implements OnInit {\n  @Input()\n  results$: Observable<Insurance>;\n\n  @Output()\n  searchTerm = new EventEmitter();\n\n  constructor(private insuranceService:InsuranceService, private router:Router, private route:ActivatedRoute) { }\n\n  ngOnInit() {\n    this.router.navigate(['/insurance/add']);\n  }\n\n  searchInsurances(search: string){\n    this.searchTerm.emit(search);\n  }\n\n  //On Click of the Add Button\n  createInsurance(mode:any){\n    this.insuranceService.selectedMode = mode;\n    this.router.navigate(['/insurance/add']);\n  }\n\n  //On Click of the Edit Button\n  selectInsurance(insurance_id:number, mode:any){\n    this.insuranceService.selectedMode = mode;\n    this.router.navigate(['/insurance/edit']);\n    setTimeout(() => {\n      this.insuranceService.selectedInsuranceId.next(insurance_id);\n    }, 100);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { InsuranceComponent} from './insurance.component';\nimport { InsuranceListComponent} from './insurance-list/insurance-list.component';\nimport { InsuranceFormComponent} from './insurance-form/insurance-form.component';\n\nconst insuranceRoutes: Routes = [\n  {\n    path: 'insurance',\n    component: InsuranceComponent,\n    children: [\n        {path: 'list',component: InsuranceListComponent},\n        {path: 'add', component: InsuranceFormComponent},\n        {path: 'edit', component: InsuranceFormComponent}\n      ]\n}];\n\n@NgModule({\n  imports: [RouterModule.forChild(insuranceRoutes)],\n  exports: [RouterModule]\n})\n export class InsuranceRoutingModule { }\n","module.exports = \"<header class=\\\"header\\\">\\n  <div class=\\\"col-12\\\">\\n    <app-title [title]=title></app-title>\\n  </div>\\n</header>\\n\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-4\\\">\\n  <app-insurance-list (searchTerm)=\\\"searchInsurances($event)\\\" [results$]=\\\"insurances$\\\"></app-insurance-list>\\n  </div>\\n  <div class=\\\"col-8\\\">\\n    <router-outlet></router-outlet>\\n  </div>\\n</div>\\n\"","module.exports = \"\"","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Subscription } from 'rxjs/Subscription';\nimport { Observable } from 'rxjs/Observable';\nimport { EmptyObservable } from 'rxjs/observable/EmptyObservable';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { Insurance } from 'app/data-model';\nimport { InsuranceService } from 'app/services/insurance/insurance.service';\n\n@Component({\n  selector: 'app-insurance',\n  templateUrl: './insurance.component.html',\n  styleUrls: ['./insurance.component.scss']\n})\nexport class InsuranceComponent implements OnInit {\n  title : string = \"Insurance\";\n  selectedInsurance : Insurance;\n\n  insurances$: Observable<Insurance>;\n\n  constructor(private fb: FormBuilder, private insuranceService:InsuranceService, private router: Router, private route: ActivatedRoute) {\n\n  }\n\n  ngOnInit() {\n    this.getInsurances();\n    this.insuranceService.refreshList.subscribe(\n      res=>{\n          this.getInsurances();\n      },\n      err => {\n        console.log(err);\n      }\n    );\n  }\n\n  getInsurances()  {\n    this.insurances$ = this.insuranceService.getInsurances();\n  }\n\n  searchInsurances(searchTerm){\n    if(searchTerm){\n      this.insurances$ = this.insuranceService.searchInsurances(searchTerm);\n    }\n    else{\n      this.insurances$ = new EmptyObservable();\n    }\n  }\n\n}\n"],"sourceRoot":""}