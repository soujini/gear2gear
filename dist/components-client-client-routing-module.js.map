{"version":3,"sources":["webpack:///./src/app/components/client/client-form/client-form.component.html","webpack:///./src/app/components/client/client-form/client-form.component.scss","webpack:///./src/app/components/client/client-form/client-form.component.ts","webpack:///./src/app/components/client/client-list/client-list.component.html","webpack:///./src/app/components/client/client-list/client-list.component.scss","webpack:///./src/app/components/client/client-list/client-list.component.ts","webpack:///./src/app/components/client/client-routing.module.ts","webpack:///./src/app/components/client/client.component.html","webpack:///./src/app/components/client/client.component.scss","webpack:///./src/app/components/client/client.component.ts","webpack:///./src/app/services/common/common.service.ts"],"names":[],"mappings":"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","file":"components-client-client-routing-module.js","sourcesContent":["module.exports = \"<section class=\\\"container-fluid section\\\">\\n  <div class=\\\"col-12 grey lighten-4\\\">\\n    <header class=\\\"header row\\\">\\n      <div class=\\\"col-12\\\">\\n        <app-title [title]=title></app-title>\\n      </div>\\n    </header>\\n    <div class=\\\"col-12\\\">\\n      <form [formGroup]=\\\"clientForm\\\" (ngSubmit)=\\\"onSubmit()\\\" >\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"inputClientName\\\" class=\\\"col-sm-3 col-form-label\\\">Name</label>\\n          <div>\\n            <div class=\\\"md-form mt-0\\\">\\n              <input type=\\\"text\\\" class=\\\"form-control capitalize\\\" id=\\\"inputClientName\\\" formControlName=\\\"name\\\">\\n              <!-- <p style=\\\"color:red\\\" *ngIf=\\\"clientForm.controls.name.touched && clientForm.controls.name.errors.required\\\">Required</p> -->\\n              <app-control-messages [control]=\\\"clientForm.controls.name\\\"></app-control-messages>\\n            </div>\\n          </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"inputPhone\\\" class=\\\"col-sm-3 col-form-label\\\">Phone</label>\\n          <div>\\n            <div class=\\\"md-form mt-0\\\">\\n              <input type=\\\"text\\\" class=\\\"form-control capitalize\\\" id=\\\"inputPhone\\\" formControlName=\\\"phone\\\">\\n              <!-- <p style=\\\"color:red\\\" *ngIf=\\\"clientForm.controls.name.touched && clientForm.controls.name.errors.required\\\">Required</p> -->\\n              <app-control-messages [control]=\\\"clientForm.controls.phone\\\"></app-control-messages>\\n            </div>\\n          </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"inputEmail\\\" class=\\\"col-sm-3 col-form-label\\\">Email</label>\\n          <div>\\n            <div class=\\\"md-form mt-0\\\">\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"inputEmail\\\" formControlName=\\\"email\\\">\\n              <!-- <p style=\\\"color:red\\\" *ngIf=\\\"clientForm.controls.name.touched && clientForm.controls.name.errors.required\\\">Required</p> -->\\n              <app-control-messages [control]=\\\"clientForm.controls.email\\\"></app-control-messages>\\n            </div>\\n          </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"inputAddress\\\" class=\\\"col-sm-3 col-form-label\\\">Address</label>\\n          <div>\\n            <div class=\\\"md-form mt-0\\\">\\n              <input type=\\\"text\\\" class=\\\"form-control capitalize\\\" id=\\\"inputAddress\\\" formControlName=\\\"address\\\">\\n              <!-- <p style=\\\"color:red\\\" *ngIf=\\\"clientForm.controls.name.touched && clientForm.controls.name.errors.required\\\">Required</p> -->\\n              <app-control-messages [control]=\\\"clientForm.controls.address\\\"></app-control-messages>\\n            </div>\\n          </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"inputCity\\\" class=\\\"col-sm-3 col-form-label\\\">City</label>\\n          <div>\\n            <div class=\\\"md-form mt-0\\\">\\n              <input type=\\\"text\\\" class=\\\"form-control capitalize\\\" id=\\\"inputCity\\\" formControlName=\\\"city\\\">\\n              <app-control-messages [control]=\\\"clientForm.controls.city\\\"></app-control-messages>\\n            </div>\\n          </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"inputState\\\" class=\\\"col-sm-3 col-form-label\\\">State</label>\\n          <div>\\n            <div class=\\\"md-form mt-0\\\">\\n              <!-- <input type=\\\"text\\\" class=\\\"form-control capitalize\\\" id=\\\"inputState\\\" formControlName=\\\"state\\\"> -->\\n              <select class=\\\"form-control\\\" id=\\\"sel1\\\" formControlName=\\\"state\\\">\\n                <option *ngFor=\\\"let state of clientService.states$\\\" [value]=\\\"state.id\\\" >{{state.name}}</option>\\n\\n              </select>\\n              <app-control-messages [control]=\\\"clientForm.controls.state\\\"></app-control-messages>\\n            </div>\\n          </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"inputPin\\\" class=\\\"col-sm-3 col-form-label\\\">Pin</label>\\n          <div>\\n            <div class=\\\"md-form mt-0\\\">\\n              <input type=\\\"text\\\" class=\\\"form-control capitalize\\\" id=\\\"inputPin\\\" formControlName=\\\"pin\\\">\\n              <!-- <p style=\\\"color:red\\\" *ngIf=\\\"clientForm.controls.name.touched && clientForm.controls.name.errors.required\\\">Required</p> -->\\n              <!-- <app-control-messages [control]=\\\"clientForm.controls.pin\\\"></app-control-messages> -->\\n            </div>\\n          </div>\\n        </div>\\n        <div class=\\\"form-check\\\">\\n          <input type=\\\"checkbox\\\" class=\\\"form-check-input\\\" id=\\\"inputInvestor\\\" formControlName=\\\"is_investor\\\">\\n          <label class=\\\"form-check-label\\\" for=\\\"inputInvestor\\\">Is Investor?</label>\\n        </div>\\n        <div class=\\\"form-group\\\" *ngIf=\\\"clientForm.controls.is_investor.value == true\\\">\\n          <label class=\\\"col-sm-3 col-form-label\\\">Investment Records</label>\\n          <div>\\n            <div class=\\\"md-form mt-0\\\">\\n              <table *ngIf=\\\"clientForm.controls.investment_records.length >=1\\\" class=\\\"table\\\" >\\n                <thead class=\\\"#f5f5f5 grey lighten-4\\\">\\n                  <tr>\\n                    <th>Date</th>\\n                    <th class=\\\"text-right\\\">Amount</th>\\n                    <th class=\\\"text-center\\\">Void</th>\\n                  </tr>\\n                </thead>\\n                <tbody>\\n                  <tr  formArrayName=\\\"investment_records\\\"\\n                  *ngFor=\\\"let item of clientForm.get('investment_records').controls; let i = index;\\\" >\\n                  <td [formGroupName]=\\\"i\\\">  <input type=\\\"date\\\" class=\\\"form-control\\\" formControlName=\\\"date\\\" placeholder=\\\"Date\\\" [readonly]=\\\"item.controls.is_disabled.value == true\\\"></td>\\n                  <td [formGroupName]=\\\"i\\\" class=\\\"text-right\\\">  <input type=\\\"text\\\" class=\\\"form-control text-right\\\" formControlName=\\\"amount\\\" placeholder=\\\"Amount\\\" [readonly]=\\\"item.controls.is_disabled.value == true\\\" (keyup)=\\\"formatCurrency(item.controls.amount)\\\"></td>\\n                  <td [formGroupName]=\\\"i\\\" class=\\\"text-center\\\">\\n                    <input *ngIf=\\\"item.controls.is_void_disabled.value == false\\\" type=\\\"checkbox\\\" class=\\\"form-check-input text-center\\\" formControlName=\\\"is_void\\\" >\\n                    <span *ngIf=\\\"item.controls.is_void_disabled.value == true\\\">Void</span>\\n                  </td>\\n                </tr>\\n                <tr class=\\\"bg-highlight\\\">\\n                  <td><span class=\\\"bold\\\">TOTAL INVESTMENT</span></td>\\n                  <td class=\\\"text-right\\\"><input type=\\\"text\\\" class=\\\"form-control border-none text-right\\\" formControlName=\\\"total_investment\\\" readonly></td>\\n                  <td></td>\\n                </tr>\\n              </tbody>\\n            </table>\\n\\n            <button type=\\\"button\\\" class=\\\"btn btn-custom\\\" (click) = \\\"addItem()\\\"><i class=\\\"fa fa-plus\\\"></i></button>\\n          </div>\\n        </div>\\n      </div>\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"text-right\\\">\\n            <button type=\\\"submit\\\" class=\\\"btn btn-primary btn-custom btn-md\\\" >\\n            <i class=\\\"fa fa-save\\\"></i>\\n            </button>\\n            <app-simple-modal [module]=\\\"module\\\" [mode]=\\\"mode\\\" [name]=\\\"clientForm.controls.name.value\\\" (isDelete)=\\\"deleteClient($event)\\\"></app-simple-modal>\\n          </div>\\n        </div>\\n      </form>\\n    </div>\\n  </div>\\n</section>\\n\"","module.exports = \"\"","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormArray } from '@angular/forms';\nimport { Router,ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { Client } from 'app/data-model';\nimport { ClientService } from 'app/services/client/client.service';\nimport { CommonService } from 'app/services/common/common.service';\n\n@Component({\n  selector: 'app-client-form',\n  templateUrl: './client-form.component.html',\n  styleUrls: ['./client-form.component.scss']\n})\nexport class ClientFormComponent implements OnInit {\n  title : string = \"Create Client\";\n  module :string=\"client\";\n  mode :string=\"discard\";\n  message:string=\"\";\n  clientForm: FormGroup;\n  selectedClient_Id: any;\n  selectedMode: any;\n  submitted = false;\n\n  constructor(\n    private fb: FormBuilder,\n    public clientService:ClientService,\n    private commonService: CommonService,\n    private router:Router,\n    private route:ActivatedRoute) {\n\n    }\n\n    createForm() {\n      this.clientForm = this.fb.group({\n        client_id: [''],\n        name: ['', [Validators.required,Validators.maxLength(50)]],\n        phone: ['', [Validators.required,Validators.maxLength(12)]],\n        email: ['', [Validators.maxLength(50)]],\n        address: ['', [Validators.maxLength(100)]],\n        city: ['', [Validators.maxLength(50)]],\n        state: [],\n        pin: ['',Validators.maxLength(10)],\n        is_investor:[false],\n        investment_records: this.fb.array([]),\n        total_investment:[0],\n        total_expenses:[0],\n        available_balance:[0]\n      });\n    }\n\n    createInvestmentRecord(): FormGroup {\n      return this.fb.group({\n        date: [],\n        amount: [],\n        is_void: [false],\n        is_disabled:[false],\n        is_void_disabled:[false]\n      });\n    }\n\n    addItem(): void {\n      const control = <FormArray> this.clientForm.controls['investment_records'];\n      control.push(this.createInvestmentRecord());\n    }\n\n    onSubmit(){\n      this.submitted = true;\n      if (this.clientForm.valid) {\n        if(this.clientService.selectedMode == 'Create'){\n          this.createClient();\n        }\n        else if (this.clientService.selectedMode == 'Edit' || this.clientService.selectedMode == 'Get'){\n          this.updateClient();\n        }\n      }\n    }\n\n    getClientById(client_id:number){\n      this.clientService.getClientById(client_id)\n      .subscribe(\n        res => {\n          this.patchForm(res[0]);\n        },\n        err => {\n          console.log(err);\n        }\n      );\n    }\n\n    patchForm(res){\n        //this.clientForm.patchValue(res);\n      this.clientForm.patchValue({\n        client_id: res.client_id,\n        name: res.name,\n        phone: res.phone,\n        email: res.email,\n        address: res.address,\n        city: res.city,\n        state: res.state,\n        pin: res.pin,\n        is_investor: res.is_investor,\n        total_investment: res.total_investment\n      });\n      if(res.investment_records != null){\n        //Disable is_investor if investment records exist\n        // this.clientForm.get('is_investor').disable();\n\n        let control = <FormArray>this.clientForm.controls.investment_records;\n        //Clear Form Array\n        while (control.length !== 0) {\n        control.removeAt(0)\n      }\n      //Patch Investment Records Array\n      res.investment_records.forEach(record => {\n      let is_void_disabled = false;\n      if(record.is_void == true){\n        is_void_disabled=true;\n      }\n      control.push(this.fb.group({date: record.date, amount: record.amount, is_void:record.is_void, is_disabled:true, is_void_disabled:is_void_disabled}))\n    })\n  }\n}\n\ncreateClient(){\n  if(this.clientForm.controls.is_investor.value == true){\n  this.clientForm.patchValue({\n    total_investment: this.getTotalInvestment(),\n    available_balance: this.getTotalInvestment()\n  });\n}\n\n  this.clientService.createClient(this.clientForm.value)\n  .subscribe(\n    res => {\n      this.clientService.refreshList.next(true);\n      this.router.navigate(['/client/add']);\n      this.clientForm.reset();\n    },\n    err => {\n      console.log(err);\n    }\n  );\n}\n\ngetTotalInvestment(){\n  let total_investment = 0;\n  this.clientForm.controls.investment_records.value.forEach(record => {\n    if(record.is_void == false){\n    total_investment = total_investment + parseInt(record.amount.replace( /,/g, \"\" ));\n  }\n  });\n  return total_investment;\n}\n\nupdateClient(){\n  let x = this.getTotalInvestment();\n  let y = this.clientForm.controls.total_expenses.value;\n\n  this.clientForm.patchValue({\n    total_investment: x,\n    available_balance: x-y,\n  });\n\n  this.clientService.updateClient(this.clientForm.value)\n  .subscribe(\n    res => {\n      this.clientService.refreshList.next(true);\n      this.router.navigate(['/client/add']);\n    },\n    err => {\n      console.log(err);\n    }\n  );\n}\n\ndeleteClient(event){\n  if(this.selectedClient_Id){\n    this.clientService.deleteClient(this.selectedClient_Id).subscribe(\n      res => {\n        this.clientService.refreshList.next(true);\n        this.router.navigate(['/client/add']);\n      },\n      err => {\n        console.log(err);\n      }\n    );\n  }\n  else{\n    this.clientForm.reset();\n  }\n}\nformatCurrency(control){\n  var val = control.value;\n  let x = val.toString().replace( /,/g, \"\" );\n  var afterPoint = '';\n  if(x.indexOf('.') > 0)\n  afterPoint = x.substring(x.indexOf('.'),x.length);\n  x = Math.floor(x);\n  x=x.toString();\n  var lastThree = x.substring(x.length-3);\n  var otherNumbers = x.substring(0,x.length-3);\n  if(otherNumbers != '')\n  lastThree = ',' + lastThree;\n  var res = otherNumbers.replace(/\\B(?=(\\d{2})+(?!\\d))/g, \",\") + lastThree + afterPoint;\n  control.setValue(res);\n}\nngOnInit() {\n  this.createForm();\n  this.clientService.selectedClientId\n  .subscribe(\n    res => {\n      this.selectedClient_Id = res;\n      if(this.clientService.selectedMode == \"Get\"){\n        this.title = \"Edit Client\";\n        this.mode = \"delete\";\n        this.getClientById(res);\n      }\n    },\n    err => {\n\n    }\n  );\n}\n}\n","module.exports = \"<section class=\\\"container-fluid section-list\\\">\\n  <div>\\n    <app-search (searchTermValueChanged)=\\\"searchClients($event)\\\" (isCreate)=\\\"createClient('Create')\\\"></app-search>\\n  </div>\\n  <div>\\n\\n    <table class=\\\"table\\\">\\n\\n      <thead class=\\\"#f5f5f5 grey lighten-4\\\">\\n        <tr>\\n          <th>#</th>\\n          <th>Name</th>\\n          <th>Edit</th>\\n        </tr>\\n      </thead>\\n      <tbody>\\n        <tr *ngFor='let client of results$ | async'>\\n          <th scope=\\\"row\\\">{{client.client_id}}</th>\\n          <td>{{client.name}}</td>\\n          <td class=\\\"pointer\\\" type=\\\"button\\\" (click)=\\\"selectClient(client.client_id, 'Get')\\\">\\n              <i class=\\\"fa fa-pencil\\\"></i>\\n          </td>\\n        </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n</section>\\n\"","module.exports = \"\"","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Router,ActivatedRoute } from '@angular/router';\n\nimport { Client,Make,Model } from 'app/data-model';\nimport { ClientService } from 'app/services/client/client.service';\n\n\n@Component({\n  selector: 'app-client-list',\n  templateUrl: './client-list.component.html',\n  styleUrls: ['./client-list.component.scss']\n})\nexport class ClientListComponent implements OnInit {\n  @Input()\n  results$: Observable<Client>;\n\n\n  @Output()\n  searchTerm = new EventEmitter();\n\n  constructor(private clientService:ClientService, private router:Router, private route:ActivatedRoute) { }\n\n  ngOnInit() {\n    this.router.navigate(['/client/add']);\n  }\n\n  searchClients(search: string){\n    this.searchTerm.emit(search);\n  }\n\n  //On Click of the Add Button\n  createClient(mode:any){\n    this.clientService.selectedMode = mode;\n    this.router.navigate(['/client/add']);\n  }\n\n  //On Click of the Edit Button\n  selectClient(client_id:number, mode:any){\n    this.clientService.selectedMode = mode;\n    this.router.navigate(['/client/edit']);\n    setTimeout(() => {\n      this.clientService.selectedClientId.next(client_id);\n    }, 100);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ClientComponent} from './client.component';\nimport { ClientListComponent} from './client-list/client-list.component';\nimport { ClientFormComponent} from './client-form/client-form.component';\n\nconst clientRoutes: Routes = [\n  {\n    path: 'client',\n    component: ClientComponent,\n    children: [\n        {path: 'list',component: ClientListComponent},\n        {path: 'add', component: ClientFormComponent},\n        {path: 'edit', component: ClientFormComponent}\n      ]\n}];\n\n@NgModule({\n  imports: [RouterModule.forChild(clientRoutes)],\n  exports: [RouterModule]\n})\n export class ClientRoutingModule { }\n","module.exports = \"\\n<header class=\\\"header\\\">\\n  <div class=\\\"col-12\\\">\\n    <app-title [title]=title></app-title>\\n  </div>\\n</header>\\n\\n<div class=\\\"row\\\">\\n\\n  <div class=\\\"col-4\\\">\\n  <app-client-list (searchTerm)=\\\"searchClients($event)\\\" [results$]=\\\"clients$\\\"></app-client-list>\\n  </div>\\n  <div class=\\\"col-8\\\">\\n    <router-outlet></router-outlet>\\n  </div>\\n</div>\\n\"","module.exports = \"\"","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Subscription } from 'rxjs/Subscription';\nimport { Observable } from 'rxjs/Observable';\nimport { EmptyObservable } from 'rxjs/observable/EmptyObservable';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { Client } from 'app/data-model';\nimport { ClientService } from 'app/services/client/client.service';\nimport { CommonService } from 'app/services/common/common.service';\n\n@Component({\n  selector: 'app-client',\n  templateUrl: './client.component.html',\n  styleUrls: ['./client.component.scss']\n})\nexport class ClientComponent implements OnInit {\n  title : string = \"Client\";\n  selectedClient : Client;\n\n  clients$: Observable<Client>;\n\n  constructor(private fb: FormBuilder, private clientService:ClientService,private commonService:CommonService, private router: Router, private route: ActivatedRoute) {\nthis.getStates();\n  }\n\n  ngOnInit() {\n    this.getClients();\n\n    this.clientService.refreshList.subscribe(\n      res=>{\n          this.getClients();\n      },\n      err => {\n        console.log(err);\n      }\n    );\n  }\n\n\n  getClients()  {\n    this.clients$ = this.clientService.getClients();\n  }\n\n  searchClients(searchTerm){\n    if(searchTerm){\n      this.clients$ = this.clientService.searchClients(searchTerm);\n    }\n    else{\n      this.clients$ = new EmptyObservable();\n    }\n  }\n\n  getStates(){\n    this.commonService.getStates().subscribe(res=>{\n    this.clientService.states$ = res.RestResponse.result;\n  })\n}\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Car } from '../../data-model';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs';\nimport 'rxjs/add/operator/catch';\nimport { map } from 'rxjs/operators';\nimport { RequestOptions } from '@angular/http';\nimport {Subject} from 'rxjs/Subject';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nconst httpOptions = {\n  headers: { 'Content-Type': 'application/json' }\n};\n\n\n@Injectable()\nexport class CommonService {\n\n\n  constructor(private http:HttpClient) {\n  }\n\n  public getStates(): Observable<any> {\n    return this.http.get('http://services.groupkt.com/state/get/IND/all',{headers: {'Content-Type': 'application/json; charset=utf-8'}});\n  }\n}\n"],"sourceRoot":""}